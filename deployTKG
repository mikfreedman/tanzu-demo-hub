#!/bin/bash
# ############################################################################################
# File: ........: deployTKG
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TKG Workload Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
#export TDH_DEPLOYMENT_ENV_NAME="awstkg"
#export TDH_DEPLOYMENT_CLOUD="AWS"
#export DEPLOY_PCF_DEPLOYMENT=aws_tkg_default.cfg
export DEBUG=0
export TDH_TKGWC_K8S_VERSION=""

. $TANZU_DEMO_HUB/functions

usage() {
  echo ""
  echo "USAGE: $0 [options] -m <mgmt-cluster> -d <deployment> -n <cluster-name> [-k <kubernetes-version>] [--debug]"
  echo "            Options:  -n <cluster-name>        # Should reflect the environment and its purpose. Make sure"
  echo "                                               # to add your user name, to prevent conflicts in TMC"
  echo "                                               # ie. tdh-sdubois-azure or tdh-sdubois-aws-01"
  echo ""
  echo "                      -k <kubernetes-version>  # default (latest)"
  echo "                                               # use 'tanzu kubernetes-release get' to see available"
  echo ""
  echo "                      --debug                  # default (disabled)"
  echo ""
}

listClusterConfig() {
  echo
  printf "%-31s %-5s %-15s %-20s %-5s %s\n" "DEPLOYMENT" "PLAN" "DESCRIPTION" 
  echo "-----------------------------------------------------------------------------------------------------------"

  for deployment in $(ls -1 ${TDHPATH}/deployments/tkg-*.cfg | grep -v "tkgmc-"); do
    TDH_DEPLOYMENT_DESCRIPTION=$(egrep "^TDH_DEPLOYMENT_DESCRIPTION=" $deployment | awk -F'=' '{ print $2 }' | sed 's/"//g')
    TDH_DEPLOYMENT_CLUSTER_PLAN=$(egrep "^TDH_DEPLOYMENT_CLUSTER_PLAN=" $deployment | awk -F'=' '{ print $2 }')

    dep=$(basename $deployment)

    printf "%-31s %-5s %-15s %-20s %-5s %s\n" $dep "$TDH_DEPLOYMENT_CLUSTER_PLAN" "$TDH_DEPLOYMENT_DESCRIPTION"
  done

  echo "-----------------------------------------------------------------------------------------------------------"
}

listDeployments() {
  echo
  printf "%-31s %-7s %-15s %-22s %-5s %s\n" "TKG-MANAGEMENT-CLUSTER" "CLOUD" "REGION" "STATUS"
  echo "-----------------------------------------------------------------------------------------------------------"

  cnt=$(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null | wc -l | sed 's/  *//g')
  if [ $cnt -eq 0 ]; then 
    echo "No TKG Management Cluster has been deployed, Please use ./deployTKGmc"
  else
    for deployment in $(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null); do
      TDH_TKGMC_NAME=$(egrep "^TDH_TKGMC_NAME=" $deployment | awk -F'=' '{ print $2 }') 
      TDH_TKGMC_CONFIG=$(egrep "^TDH_TKGMC_CONFIG=" $deployment | awk -F'=' '{ print $2 }') 
      TDH_TKGMC_INFRASTRUCTURE=$(egrep "^TDH_TKGMC_INFRASTRUCTURE=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_KUBECONFIG=$(egrep "^TDH_TKGMC_KUBECONFIG=" $deployment | awk -F'=' '{ print $2 }')

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "Azure" ]; then
        TDH_REGION=$(egrep "^AZURE_LOCATION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "AWS" ]; then 
        TDH_REGION=$(egrep "^AWS_REGION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      # --- VERIFY MANAGEMENT CLUSTER ---
      kubectl get cluster --kubeconfig ${HOME}/.tanzu-demo-hub/config/${TDH_TKGMC_KUBECONFIG} > /dev/null 2>&1
      if [ $? -ne 0 ]; then smc="unavailable"; else smc="active"; fi
      
      cnt=$(kubectl config get-clusters | egrep -c "^$TDH_TKGMC_NAME") 
      if [ $cnt -eq 0 ]; then stt="not-deployed"; else stt="deployed/$smc"; fi
  
      printf "%-31s %-7s %-15s %-22s %-5s %s\n" $TDH_TKGMC_NAME $TDH_TKGMC_INFRASTRUCTURE $TDH_REGION "$stt"
    done
  fi

  echo "-----------------------------------------------------------------------------------------------------------"
}

echo ""
echo "Tanzu Demo Hub - Deploy TKG Workload Cluster"
echo "by Sacha Dubois, VMware Inc,"
echo "-----------------------------------------------------------------------------------------------------------"

while [ "$1" != "" ]; do
  case $1 in
    -d)  TKG_DEPLOYMENT=$2;;
    -m)  TDH_TKGMC_NAME=$2;;
    -n)  TDH_TKGWC_NAME=$2;;
    -k)  TDH_TKGWC_K8S_VERSION=$2;;
    --debug) DEBUG=1;;
  esac
  shift
done

if [ "${TKG_DEPLOYMENT}" == "" -o "${TDH_TKGMC_NAME}" == "" -o "${TDH_TKGWC_NAME}" == "" ]; then
  if [ "${TKG_DEPLOYMENT}" == "" ]; then 
    listDeployments
  fi

  if [ "${TKG_WC_CLUSTER}" == "" ]; then 
    listClusterConfig
  fi
  usage; exit 0
fi

if [ "$TDH_TKGWC_K8S_VERSION" != "" ]; then 
  tanzu kubernetes-release get 2323 | sed '1d'
  cnt=$(tanzu kubernetes-release get $TDH_TKGWC_K8S_VERSION | sed '1d' | wc -l | sed 's/  *//g') 
  if [ $cnt -eq 0 ]; then 
    cnt=$(tanzu kubernetes-release get | grep -c " $TDH_TKGWC_K8S_VERSION ")
    if [ $cnt -gt 0 ]; then 
      echo "ERROR: Kubernetes Version ($TDH_TKGWC_K8S_VERSION) not found, Please take the 'NAME'"
      echo "       instead of the 'VERSION'."
      echo "       => tanzu kubernetes-release get"
      echo ""
      tanzu kubernetes-release get
      echo "-----------------------------------------------------------------------------------------------------------"
      exit
    else
      echo "ERROR: Kubernetes Version ($TDH_TKGWC_K8S_VERSION) not found, Please choose one from"
      echo "       the 'NAME' Column."
      echo "       => tanzu kubernetes-release get"
      echo ""
      tanzu kubernetes-release get
      echo "-----------------------------------------------------------------------------------------------------------"
      exit
    fi
  fi
else
  TDH_TKGWC_K8S_VERSION=$(tanzu kubernetes-release get | tail -1 | awk '{ print $1 }')
fi

# --- VERIFY DEPLOYMENT ---
TKG_DEPLOYMENT_CONFIG=$(echo $TKG_DEPLOYMENT | sed 's/cfg/yaml/g') 
if [ ! -f ${TDHPATH}/deployments/${TKG_DEPLOYMENT} ]; then
  echo "ERROR: Deployment file $TKG_DEPLOYMENT can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${TKG_DEPLOYMENT}
fi

if [ ! -f ${TDHPATH}/deployments/${TKG_DEPLOYMENT_CONFIG} ]; then
  echo "ERROR: The Deployment deployments/$TKG_DEPLOYMENT does not have a releated $TKG_DEPLOYMENT_CONFIG file"
  echo "       Please take deployments/tkg-tanzu-demo-hub.yaml as a template."
  exit 1
fi

# --- CHECK ENVIRONMENT VARIABLES ---
if [ -f ~/.tanzu-demo-hub.cfg ]; then
  . ~/.tanzu-demo-hub.cfg
fi

# --- SOURCE MANAGEMENT CLUSTER VARIABLES ---
if [ -f $HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.cfg ]; then
  . $HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.cfg
fi

if [ "$TDH_DEPLOYMENT_CLUSTER_PLAN" == "dev" ]; then 
  TDH_TKGMC_CONFIG=$TDH_TKGMC_WC_CONFIG_DEV
else
  TDH_TKGMC_CONFIG=$TDH_TKGMC_WC_CONFIG_PROD
fi

cat $HOME/.tanzu/tkg/clusterconfigs/$TDH_TKGMC_CONFIG $HOME/.tanzu-demo-hub/config/$TKG_DEPLOYMENT_CONFIG | \
   egrep -v "^#" | sed -e '/^$/d' > /tmp/${TDH_TKGWC_NAME}.yaml

messageTitle "Tanzu Kubernetes Grid Deployment"
messagePrint " - Management Cluster Name"               "$TDH_TKGMC_NAME"
messagePrint " - Management Cluster Configuration"      "deployments/${TDH_TKGMC_NAME}.cfg"
messagePrint " - Deployment Configuration"              "deployments/$TKG_DEPLOYMENT_CONFIG"
messagePrint " - Workload Cluster Name"                 "$TDH_TKGWC_NAME"
messagePrint " - Workload Cluster Cloud Config"         "$HOME/.tanzu/tkg/clusterconfigs/$TDH_TKGMC_CONFIG"
messagePrint " - Workload Cluster Configuration"        "deployments/$TKG_DEPLOYMENT_CONFIG"
messagePrint " - Workload Cluster consolidated Config"  "/tmp/${TDH_TKGWC_NAME}.yaml"
if [ $DEBUG -gt 0 ]; then 
  echo "-----------------------------------------------------------------------------------------------------------"
  cat $HOME/.tanzu/tkg/clusterconfigs/$TDH_TKGMC_CONFIG deployments/$TKG_DEPLOYMENT_CONFIG | egrep -v "^#" | sed -e '/^$/d'
fi

tanzu cluster get $TDH_TKGWC_NAME >/dev/null 2>&1
if [ $? -ne 0 ]; then  
  echo "-----------------------------------------------------------------------------------------------------------"
  echo "=> tanzu cluster create $TDH_TKGWC_NAME -f /tmp/${TDH_TKGWC_NAME}.yaml --tkr $TDH_TKGWC_K8S_VERSION" 
  tanzu cluster create $TDH_TKGWC_NAME -f /tmp/${TDH_TKGWC_NAME}.yaml --tkr $TDH_TKGWC_K8S_VERSION
  echo "-----------------------------------------------------------------------------------------------------------"
else
 tanzu cluster get $TDH_TKGWC_NAME
fi


exit

