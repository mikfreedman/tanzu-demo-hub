#!/bin/bash
# ############################################################################################
# File: ........: deployTKG
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TKG Workload Cluster
# ############################################################################################

if [ ! -f /tkg_software_installed ]; then 
  echo "ERROR: $0 Needs to run on a TKG Jump Host"; exit 
fi

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)

. $TANZU_DEMO_HUB/functions

usage() {
  echo ""
  echo "USAGE: $0 [options] -d <deployment> -c <cluster-config> -n <cluster-name>"
}

listClusterConfig() {
  echo
  printf "%-31s %-5s %-15s %-20s %-5s %s\n" "CONFIURATION" "DESCRIPTION" 
  echo "-----------------------------------------------------------------------------------------------------------"

  for deployment in $(ls -1 ${TDHPATH}/deployments/tkg-*.cfg); do
    . $deployment

    dep=$(basename $deployment)

    printf "%-31s %-5s %-15s %-20s %-5s %s\n" $dep "$TDH_TKGWC_DESCRIPTION"
  done

  echo "-----------------------------------------------------------------------------------------------------------"
}

listDeployments() {
  echo
  printf "%-31s %-5s %-15s %-22s %-5s %s\n" "DEPLOYMENTS" "CLOUD" "REGION" "MGMT-CLUSTER" "PLAN" "status"
  echo "-----------------------------------------------------------------------------------------------------------"

  for deployment in $(ls -1 ${TDHPATH}/deployments/tkgmc-*.cfg); do
    . $deployment

    dep=$(basename $deployment)
    sdp="undeployed"
    smc="inactive"

    stt=$(tkg get mc -q $TDH_TKGMC_NAME -o json --config ${TDHPATH}/config/$TDH_TKGMC_CONFIG | jq -r '.[].status')
    if [ "${stt}" != "" ]; then 
      if [ "${stt}" == "Success" ]; then smc="deployed/active"; else smc="deployed/$stt"; fi
    else
      smc=""
    fi

    printf "%-31s %-5s %-15s %-22s %-5s %s\n" $dep $TDH_TKGMC_INFRASTRUCTURE $TDH_TKGMC_REGION $TDH_TKGMC_NAME \
           $TDH_TKGMC_PLAN "$smc"
  done

  echo "-----------------------------------------------------------------------------------------------------------"
}

echo ""
echo "Tanzu Demo Hub - Deploy TKG Workload Cluster"
echo "by Sacha Dubois, VMware Inc,"
echo "-----------------------------------------------------------------------------------------------------------"

while [ "$1" != "" ]; do
  case $1 in
    -d)  TKG_DEPLOYMENT=$2;;
    -c)  TKG_WC_CLUSTER=$2;;
    -n)  TDH_TKGWC_NAME=$2;;
  esac
  shift
done

if [ "${TKG_DEPLOYMENT}" == "" -o "${TKG_WC_CLUSTER}" == "" -o "${TDH_TKGWC_NAME}" == "" ]; then
  if [ "${TKG_DEPLOYMENT}" == "" ]; then 
    listDeployments
  fi

  if [ "${TKG_WC_CLUSTER}" == "" ]; then 
    listClusterConfig
  fi
  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ ! -f ${TDHPATH}/deployments/${TKG_DEPLOYMENT} ]; then
  echo "ERROR: Deployment file $TKG_DEPLOYMENT can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${TKG_DEPLOYMENT}
fi

# --- VERIFY DEPLOYMENT ---
echo "${TDHPATH}/deployments/${TKG_WC_CLUSTER}"
if [ ! -f ${TDHPATH}/deployments/${TKG_WC_CLUSTER} ]; then
  echo "ERROR: Config file $TKG_WC_CLUSTER can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${TKG_WC_CLUSTER}
fi

# --- CHECK ENVIRONMENT VARIABLES ---
if [ -f ~/.tanzu-demo-hub.cfg ]; then
  . ~/.tanzu-demo-hub.cfg
fi

export TDH_OPTIONS=""
export TDH_DEPLOYMENT_ENV_NAME=$TDH_TKGMC_INFRASTRUCTURE
export TKG_CONFIG=${TDHPATH}/config/$TDH_TKGMC_CONFIG

if [ "${TDH_TKGWC_PLAN}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --plan=$TDH_TKGWC_PLAN"; fi
if [ "${TDH_TKGWC_KUBERNETES}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --kubernetes-version=$TDH_TKGWC_KUBERNETES"; fi
if [ "${TDH_TKGWC_CONTROPLANE}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --controlplane-machine-count=$TDH_TKGWC_CONTROPLANE"; fi
if [ "${TDH_TKGWC_WORKERNODES}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --worker-machine-count=$TDH_TKGWC_WORKERNODES"; fi

# --- VERIFY TKG MANAGEMENT CLUSTER ---
stt=$(tkg get mc --name $TDH_TKGMC_NAME -o json | jq -r '.[].status')
con=$(tkg get mc --name $TDH_TKGMC_NAME -o json | jq -r '.[].context')
isc=$(tkg get mc --name $TDH_TKGMC_NAME -o json | jq -r '.[].true')
if [ "${stt}" != "Success" ]; then 
  echo "ERROR: $0 TKG Management Cluster deployment was not Successfil"; exit 1
fi

if [ "${isc}" != "true" ]; then 
  tkg set mc -c "$con" $TDH_TKGMC_NAME > /dev/null 2>&1
fi

# --- VERIFY TKG WORKLOAD CLUSTER ---
stt=$(tkg get cluster -o json | jq -r --arg key $TDH_TKGWC_NAME '.[] | select(.name == $key).status')
if [ "${stt}" == "" ]; then 
  messageTitle "Creating TKG Cluster ($TDH_TKGWC_NAME)"
  echo "-----------------------------------------------------------------------------------------------------------"
  tkg create cluster $TDH_TKGWC_NAME $TDH_OPTIONS
  tkg get credentials $TDH_TKGWC_NAME
  messagePrint "- Kubernetes Context:" "$TDH_TKGWC_NAME-admin@$TDH_TKGWC_NAME"
  kubectl config use-context $TDH_TKGWC_NAME-admin@$TDH_TKGWC_NAME > /dev/null 2>&1
  echo "-----------------------------------------------------------------------------------------------------------"
else
  messageTitle "Verify TKG Cluster ($TDH_TKGWC_NAME)"
  messagePrint "- Kubernetes Context:" "$TDH_TKGWC_NAME-admin@$TDH_TKGWC_NAME"
  #kubectl config use-context $con > /dev/null 2>&1
  kubectl config use-context $TDH_TKGWC_NAME-admin@$TDH_TKGWC_NAME > /dev/null 2>&1
fi

echo "TDH_TKGWC_NAME=$TDH_TKGWC_NAME"                        >  ${TDHPATH}/config/${TDH_TKGWC_NAME}.cfg
echo "K8S_CONTEXT=$TDH_TKGWC_NAME-admin@$TDH_TKGWC_NAME"     >> ${TDHPATH}/config/${TDH_TKGWC_NAME}.cfg
echo "TKG_DEPLOYMENT=$TKG_DEPLOYMENT"                        >> ${TDHPATH}/config/${TDH_TKGWC_NAME}.cfg
echo "TDH_TKGMC_CONFIG=$TDH_TKGMC_CONFIG"                    >> ${TDHPATH}/config/${TDH_TKGWC_NAME}.cfg
echo "TKG_WC_CLUSTER=$TKG_WC_CLUSTER"                        >> ${TDHPATH}/config/${TDH_TKGWC_NAME}.cfg

if [ "${TDH_TKGWC_INGRESS_CONTOUR}" == "true" ]; then 
  messageTitle "Install Ingress Contour" 
  stt=$(kubectl get ns -o json | jq -r '.items[] | select(.metadata.name == "vmware-system-tmc").status.phase')
  if [ "${stt}" == "" ]; then
    cd ${TDHPATH}/extensions/$TDH_TKGWC_EXTENSIONS/extensions
    # --- INSTALL TMC EXTENSION MANAGER ---
    kubectl apply -f tmc-extension-manager.yaml >/dev/null 2>&1
    if [ $? -ne 0 ]; then 
      messagePrint "- Install Extension Manager" "failed"
      echo "ERROR: Installation of TMC Extension manager failed"
      echo "       => cd $TDHPATH/extensions/$TDH_TKGWC_EXTENSIONS"
      echo "       => kubectl apply -f tmc-extension-manager.yaml"
      exit
    else
      messagePrint "- Install TMC Extension Manager" "completed"
    fi
  else
    messagePrint "- Verify TMC Extension Manager"  "installed/running"
  fi

  # -- INSTALL KAPP CONTROLLER ---
  #kubectl config use-context $con > /dev/null 2>&1
  kubectl apply -f kapp-controller.yaml > /dev/null 2>&1

  # -- INSTALL CERT MANAGER ---
  stt=$(kubectl get ns -o json | jq -r '.items[] | select(.metadata.name == "cert-manager").status.phase')
  if [ "${stt}" == "" ]; then
    cd ${TDHPATH}/extensions/$TDH_TKGWC_EXTENSIONS/extensions
    kubectl apply -f ../cert-manager/ > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      messagePrint "- Install Cert Manager" "failed"
      echo "ERROR: Installation of TMC Extension manager failed"
      echo "       => cd $TDHPATH/extensions/$TDH_TKGWC_EXTENSIONS"
      echo "       => kubectl apply -f ../cert-manager/"
      exit
    else
      messagePrint "- Install Cert Manager" "completed"
    fi
  fi

  # -- INSTALL CONTOUR INGRESS CONTROLLER ---
  stt=$(kubectl get ns -o json | jq -r '.items[] | select(.metadata.name == "tanzu-system-ingress").status.phase')
  if [ "${stt}" == "" ]; then
    cd ${TDHPATH}/extensions/$TDH_TKGWC_EXTENSIONS/extensions
    kubectl apply -f ingress/contour/namespace-role.yaml > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      messagePrint "- Install Contour Ingress" "failed"
      echo "ERROR: Installation of Contour Ingress failed"
      echo "       => cd $TDHPATH/extensions/$TDH_TKGWC_EXTENSIONS"
      echo "       => kubectl apply -f ingress/contour/namespace-role.yaml"
      exit
    fi

    while [ $(kubectl get pods -A | sed 1d | grep -v Running | wc -l) -ne 0 ]; do
      sleep 10
    done

    if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "Azure" ]; then 
      cd ${TDHPATH}/extensions/$TDH_TKGWC_EXTENSIONS/extensions
      cp ingress/contour/azure/contour-data-values.yaml.example ingress/contour/azure/contour-data-values.yaml
      echo ""                               >> ingress/contour/azure/contour-data-values.yaml
      echo "  service:"                     >> ingress/contour/azure/contour-data-values.yaml
      echo "    type: LoadBalancer"         >> ingress/contour/azure/contour-data-values.yaml
    fi

    stt=$(kubectl get secret contour-data-values -n tanzu-system-ingress -o json 2>/dev/null | jq -r '.metadata.name') 
    if [ "${stt}" == "" ]; then
      cd ${TDHPATH}/extensions/$TDH_TKGWC_EXTENSIONS/extensions
      kubectl create secret generic contour-data-values --from-file=values.yaml=ingress/contour/azure/contour-data-values.yaml \
              -n tanzu-system-ingress > /dev/null 2>&1
    fi

    cnt=$(kubectl get extension contour -n tanzu-system-ingress 2>/dev/null | egrep -c "^contour" )
    if [ $cnt -eq 0 ]; then
      kubectl apply -f ingress/contour/contour-extension.yaml > /dev/null 2>&1
      sleep 10
    fi

    i=0
    while [ $i -lt 3 ]; do
      stt=$(kubectl get app contour -n tanzu-system-ingress -o json | jq -r '.status.friendlyDescription')
      while [ "${stt}" == "Reconciling" ]; do
        stt=$(kubectl get app contour -n tanzu-system-ingress -o json | jq -r '.status.friendlyDescription')
        sleep 10
      done
      sleep 30
      let i=i+1
    done

    if [ "${stt}" == "Reconcile succeeded" ]; then
      messagePrint "- Install Contour Ingress" "completed"
    else
      kubectl get app contour -n tanzu-system-ingress
      #kubectl get app contour -n tanzu-system-ingress -o yaml
      messagePrint "- Install Contour Ingress" "failed"; exit
    fi

    cd ${TDHPATH}
  fi

  # --- SET CLUSTER DNS ---
  ipa=$(kubectl get svc envoy -n tanzu-system-ingress -o json | jq -r '.status.loadBalancer.ingress[].ip')
  if [ "${ipa}" != "" ]; then 
    setTKGclusterDNS "$TDH_TKGWC_NAME" "${ipa}" "apps"
  else
    echo "ERROR: Unable to get LoadBalancer IP-Adress of the Ingress"
    echo "       => kubectl get svc envoy -n tanzu-system-ingress"
    exit 1
  fi
fi

if [ "${TDH_TKGWC_INGRESS_NGINX}" == "true" ]; then 
  #https://docs.bitnami.com/kubernetes/get-started-tkg/
  messageTitle "Install Ingress NGINX" 
  messagePrint "- Confogure Helm Repo" "https://charts.helm.sh/stable"
  helm repo add stable https://charts.helm.sh/stable > /dev/null 2>&1

  messagePrint "- Configure Bitnami Helm Repo" "https://charts.bitnami.com/bitnami"
  helm repo add bitnami https://charts.bitnami.com/bitnami
  helm repo update > /dev/null 2>&1

  messagePrint "- Create ServiceAccount for tiller" "demos/k8s-helm/rbac-config.yaml "
  kubectl apply -f demos/k8s-helm/rbac-config.yaml > /dev/null 2>&1
  if [ $? -ne 0 ]; then 
    echo "ERROR: Failed to create tiller service aacount"
    echo "       => kubectl apply -f demos/k8s-helm/rbac-config.yaml"
  fi

#  helm init --service-account tiller > /dev/null 2>&1
#  if [ $? -ne 0 ]; then 
#    echo "ERROR: Failed to initialize tiller"
#    echo "       => helm init --service-account tiller > /dev/null 2>&1"
#  fi

  messagePrint "- Install Ingress Controller" "bitnami/nginx-ingress-controller"
  kubectl get namespace nginx-ingress > /dev/null 2>&1
  if [ $? -ne 0 ]; then kubectl create namespace nginx-ingress > /dev/null 2>&1; fi

  #helm install stable bitnami/nginx-ingress-controller -n nginx-ingress --set rbac.create=true
  helm install stable bitnami/nginx-ingress-controller -n nginx-ingress > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to install bitnami/nginx-ingress-controller"
    echo "       => helm install stable bitnami/nginx-ingress-controller"
  fi

echo gaga1
  # --- SET CLUSTER DNS ---
  ipa=$(kubectl get svc stable-nginx-ingress-controller -n nginx-ingress -o json 2>/dev/null | jq -r '.status.loadBalancer.ingress[].ip' 2>/dev/null)
  while [ "${ipa}" == "" ]; do
    sleep 10
    ipa=$(kubectl get svc stable-nginx-ingress-controller -n nginx-ingress -o json 2>/dev/null | jq -r '.status.loadBalancer.ingress[].ip' 2>/dev/null)
  done
echo gaga2

  if [ "${ipa}" != "" ]; then
    setTKGclusterDNS "$TDH_TKGWC_NAME" "${ipa}" "nginx"
  else
    echo "ERROR: Unable to get LoadBalancer IP-Adress of the Ingress"
    echo "       => kubectl get svc envoy -n tanzu-system-ingress"
    exit 1
  fi

  #helm search repo bitnami
  #helm search repo standard
  #bitnami/nginx-ingress-controller 
fi

#  stt=$(kubectl get ns -o json | jq -r '.items[] | select(.metadata.name == "cert-manager").status.phase')
#  if [ "${stt}" == "" ]; then
#    cd ${TDHPATH}/extensions/$TDH_TKGWC_EXTENSIONS/extensions

if [ "${TDH_TKGWC_INGRESS_HARBOR}" == "true" ]; then
echo gaga3
  # https://docs.vmware.com/en/VMware-Tanzu-Kubernetes-Grid/1.2/vmware-tanzu-kubernetes-grid-12/GUID-extensions-harbor-registry.html"
  messageTitle "Install Harbor Registry"
  messagePrint "- Confogure Helm Repo" "https://charts.helm.sh/stable"
  cd ${TDHPATH}/extensions/$TDH_TKGWC_EXTENSIONS/extensions

  messagePrint "- Create a namespace for the Harbor service" "registry/harbor/namespace-role.yaml"
  kubectl apply -f registry/harbor/namespace-role.yaml > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to create namespace for the Harbor service"
    echo "       => kubectl apply -f registry/harbor/namespace-role.yaml"
  fi

  if [ -d ../../certificates ]; then
    TLS_CERTIFICATE=certificates/fullchain.pem
    TLS_PRIVATE_KEY=certificates/privkey.pem
  fi

  # --- CHECK IF CERTIFICATE HAS BEEN DEFINED ---
  if [ "${TLS_CERTIFICATE}" == "" -o "${TLS_PRIVATE_KEY}" == "" ]; then
    echo ""
    echo "ERROR: Certificate and Private-Key has not been specified. Please set"
    echo "       the following environment variables:"
    echo "       => export TLS_CERTIFICATE=<cert.pem>"
    echo "       => export TLS_PRIVATE_KEY=<private_key.pem>"
    echo ""
    exit 1
  else
    verifyTLScertificate $TLS_CERTIFICATE $TLS_PRIVATE_KEY
  fi

  # --- CONVERT CERTS TO BASE64 ---
  cert=$(base64 --wrap=10000 $TLS_CERTIFICATE)
  pkey=$(base64 --wrap=10000 $TLS_PRIVATE_KEY)

  sudo snap install yq > /dev/null 2>&1
  cp registry/harbor/harbor-data-values.yaml.example registry/harbor/harbor-data-values.yaml
  bash registry/harbor/generate-passwords.sh registry/harbor/harbor-data-values.yaml

  DNS_HARBOR="harbor.${TDH_TKGMC_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}"
  messagePrint "- Configure Harber Name" "$DNS_HARBOR"
  sed -i "s/hostname: core.harbor.domain/hostname: $DNS_HARBOR/g" registry/harbor/harbor-data-values.yaml
  messagePrint "- Set Admin Password" "XXXXXXXXX"
  sed -i "s/^harborAdminPassword: .*$/harborAdminPassword: harbor/g" registry/harbor/harbor-data-values.yaml
  messagePrint "- Add Cerfificate and PrivateKey for domain" "$DNS_HARBOR"
  sed -i "s/  tls.crt:/  tls.crt: $cert/g" registry/harbor/harbor-data-values.yaml
  sed -i "s/  tls.key:/  tls.key: $pkey/g" registry/harbor/harbor-data-values.yaml

  messagePrint "- Create secrets for the Harbor config" "registry/harbor/harbor-data-values.yaml"
  kubectl create secret generic harbor-data-values --from-file=values.yaml=registry/harbor/harbor-data-values.yaml \
       -n tanzu-system-registry  > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to create secret for the Harbor service"
    echo "       => kubectl create secret generic harbor-data-values --from-file=values.yaml=registry/harbor/harbor-data-values.yaml \
       -n tanzu-system-registry"
  fi

  messagePrint "- Deploy the Harbor service" "registry/harbor/harbor-extension.yaml"
  kubectl apply -f registry/harbor/harbor-extension.yaml > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to deploy the Harbor service"
    echo "       => kubectl apply -f registry/harbor/harbor-extension.yaml"
  fi

  cnt=$(kubectl get extension harbor -n tanzu-system-registry 2>/dev/null | egrep -c "^harbor")
  if [ $cnt -eq 0 ]; then
    kubectl apply -f ingress/contour/contour-extension.yaml > /dev/null 2>&1
    sleep 10
  fi

  i=0
  while [ $i -lt 3 ]; do
    stt=$(kubectl get app harbor -n tanzu-system-registry -o json | jq -r '.status.friendlyDescription')
    while [ "${stt}" == "Reconciling" ]; do
      stt=$(kubectl get app harbor -n tanzu-system-registry -o json | jq -r '.status.friendlyDescription')
      sleep 10
    done
    sleep 30
    let i=i+1
  done

  if [ "${stt}" == "Reconcile succeeded" ]; then
    messagePrint "- Install Harbor Registry" "completed"
  else
    kubectl get app harbor -n tanzu-system-registry
    messagePrint "- Install Harbor Registry" "failed"; exit
  fi

  cd ${TDHPATH}
fi

exit

  #messagePrint " - Install Ingress NGINX"    "$TDH_TKGWC_INGRESS_NGINX" 
