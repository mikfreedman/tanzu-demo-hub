#!/bin/bash
# ############################################################################################
# File: ........: deployTKG
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TKG Workload Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0
export TDH_TKGWC_K8S_VERSION=""
export CMD_EXEC=$(basename $0)
export CMD_ARGS=$*

. $TANZU_DEMO_HUB/functions

usage() {
  echo ""
  echo "USAGE: $0 [options] -m <mgmt-cluster> -d <deployment> -n <cluster-name> [-k <kubernetes-version>] [--debug]"
  echo "            Options:  -n  <cluster-name>        # Should reflect the environment and its purpose. Make sure"
  echo "                                                # to add your user name, to prevent conflicts in TMC"
  echo "                                                # ie. tdh-sdubois-azure or tdh-sdubois-aws-01"
  echo ""
  echo "                      -tag <name-tag>           # Cluster NameTag ie. TKG_CLUSTER_01 or TKG_CLUSTER_02"
  echo "                      -k  <controlplane-ip>     # default (latest)"
  echo "                                                # use 'tanzu kubernetes-release get' to see available"
  echo ""
  echo "                      --debug                   # default (disabled)"
  echo "                      --native                  # Use 'native' installed tools instead of the tdh-tools container"
  echo ""
}

listClusterConfig() {
  echo
  printf "%-31s %-5s %-15s %-20s %-5s %s\n" "DEPLOYMENT" "PLAN" "DESCRIPTION" 
  echo "-----------------------------------------------------------------------------------------------------------"

  for deployment in $(ls -1 ${TDHPATH}/deployments/tkg-*.cfg | grep -v "tkgmc-"); do
    TDH_DEPLOYMENT_DESCRIPTION=$(egrep "^TDH_DEPLOYMENT_DESCRIPTION=" $deployment | awk -F'=' '{ print $2 }' | sed 's/"//g')
    TDH_DEPLOYMENT_CLUSTER_PLAN=$(egrep "^TDH_DEPLOYMENT_CLUSTER_PLAN=" $deployment | awk -F'=' '{ print $2 }')

    dep=$(basename $deployment)

    printf "%-31s %-5s %-15s %-20s %-5s %s\n" $dep "$TDH_DEPLOYMENT_CLUSTER_PLAN" "$TDH_DEPLOYMENT_DESCRIPTION"
  done

  echo "-----------------------------------------------------------------------------------------------------------"
}

listDeployments() {
  echo
  printf "%-31s %-7s %-28s %s\n" "CONFIURATION" "CLOUD" "MANAGEMENT-CLUSTER" "STATUS"
  echo "-----------------------------------------------------------------------------------------------------------"

  cnt=$(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null | wc -l | sed 's/  *//g')
  if [ $cnt -eq 0 ]; then
    echo "No TKG Management Cluster has been deployed, Please use ./deployTKGmc"
  else
    for deployment in $(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null); do
      TDH_TKGMC_NAME=$(egrep "^TDH_TKGMC_NAME=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_CONFIG=$(egrep "^TDH_TKGMC_CONFIG=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_INFRASTRUCTURE=$(egrep "^TDH_TKGMC_INFRASTRUCTURE=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_KUBECONFIG=$(egrep "^TDH_TKGMC_KUBECONFIG=" $deployment | awk -F'=' '{ print $2 }')

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "Azure" ]; then
        TDH_REGION=$(egrep "^AZURE_LOCATION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "AWS" ]; then
        TDH_REGION=$(egrep "^AWS_REGION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      # --- VERIFY MANAGEMENT CLUSTER ---
      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "AWS" -o "$TDH_TKGMC_INFRASTRUCTURE" == "Azure" ]; then
        kubectl get cluster --kubeconfig ${HOME}/.tanzu-demo-hub/config/${TDH_TKGMC_KUBECONFIG} --request-timeout 1 > /dev/null 2>&1
        if [ $? -ne 0 ]; then smc="unavailable"; else smc="active"; fi

        cnt=$(kubectl config get-clusters | egrep -c "^$TDH_TKGMC_NAME")
        if [ $cnt -eq 0 ]; then stt="not-deployed"; else stt="deployed/$smc"; fi
      else
        cnt=$(tanzu config server list |  egrep -c " $TDH_TKGMC_NAME ")
        if [ $cnt -gt 0 ]; then
          smc="active"
          ctx=$(tanzu config server list |  egrep " $TDH_TKGMC_NAME " | awk '{ print $NF }')
          kubectl config use-context $ctx > /dev/null 2>&1
          if [ $? -ne 0 ]; then stt="not-deployed"; else stt="deployed/$smc"; fi
        else
          smc="unavailable"
        fi
      fi

      dep=$(echo $deployment | awk -F'/' '{ print $NF }')

      printf "%-31s %-7s %-28s %-22s %-18s %s\n" $dep $TDH_TKGMC_INFRASTRUCTURE $TDH_TKGMC_NAME "$stt"
    done
  fi

  echo "-----------------------------------------------------------------------------------------------------------"
}

listDeployments_old() {
  echo
  printf "%-31s %-7s %-15s %-22s %-5s %s\n" "TKG-MANAGEMENT-CLUSTER" "CLOUD" "REGION" "STATUS"
  echo "-----------------------------------------------------------------------------------------------------------"

  cnt=$(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null | wc -l | sed 's/  *//g')
  if [ $cnt -eq 0 ]; then 
    echo "No TKG Management Cluster has been deployed, Please use ./deployTKGmc"
  else
    for deployment in $(ls -1 ${HOME}/.tanzu-demo-hub/config/tkgmc-*.cfg 2>/dev/null); do
      TDH_TKGMC_NAME=$(egrep "^TDH_TKGMC_NAME=" $deployment | awk -F'=' '{ print $2 }') 
      TDH_TKGMC_CONFIG=$(egrep "^TDH_TKGMC_CONFIG=" $deployment | awk -F'=' '{ print $2 }') 
      TDH_TKGMC_INFRASTRUCTURE=$(egrep "^TDH_TKGMC_INFRASTRUCTURE=" $deployment | awk -F'=' '{ print $2 }')
      TDH_TKGMC_KUBECONFIG=$(egrep "^TDH_TKGMC_KUBECONFIG=" $deployment | awk -F'=' '{ print $2 }')

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "Azure" ]; then
        TDH_REGION=$(egrep "^AZURE_LOCATION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      if [ "$TDH_TKGMC_INFRASTRUCTURE" == "AWS" ]; then 
        TDH_REGION=$(egrep "^AWS_REGION:" ${HOME}/.tanzu-demo-hub/config/$TDH_TKGMC_CONFIG | awk '{ print $2 }')
      fi

      # --- VERIFY MANAGEMENT CLUSTER ---
      kubectl get cluster --kubeconfig ${HOME}/.tanzu-demo-hub/config/${TDH_TKGMC_KUBECONFIG} > /dev/null 2>&1
      if [ $? -ne 0 ]; then smc="unavailable"; else smc="active"; fi
      
      cnt=$(kubectl config get-clusters | egrep -c "^$TDH_TKGMC_NAME") 
      if [ $cnt -eq 0 ]; then stt="not-deployed"; else stt="deployed/$smc"; fi
  
      printf "%-31s %-7s %-15s %-22s %-5s %s\n" $TDH_TKGMC_NAME $TDH_TKGMC_INFRASTRUCTURE $TDH_REGION "$stt"
    done
  fi

  echo "-----------------------------------------------------------------------------------------------------------"
}

while [ "$1" != "" ]; do
  case $1 in
    -d)   TKG_DEPLOYMENT=$2;;
    -m)   TDH_TKGMC_NAME=$2;;
    -n)   TDH_TKGWC_NAME=$2;;
    -k)   TDH_TKGWC_K8S_VERSION=$2;;
    -tag) TDH_TKGWC_NAME_TAG=$2;;
    --debug)       DEBUG=1;;
    --native)      NATIVE=1;;
  esac
  shift
done


if [ "${TKG_DEPLOYMENT}" == "" -o "${TDH_TKGMC_NAME}" == "" -o "${TDH_TKGWC_NAME}" == "" ]; then
  if [ "${TKG_DEPLOYMENT}" == "" ]; then 
    listDeployments
  fi

  if [ "${TKG_WC_CLUSTER}" == "" ]; then 
    listClusterConfig
  fi
  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
TKG_DEPLOYMENT_CONFIG=$(echo $TKG_DEPLOYMENT | sed 's/cfg/yaml/g')
if [ ! -f ${TDHPATH}/deployments/${TKG_DEPLOYMENT} ]; then
  echo "ERROR: Deployment file $TKG_DEPLOYMENT can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${TKG_DEPLOYMENT}
fi

if [ ! -f ${TDHPATH}/deployments/${TKG_DEPLOYMENT} ]; then
  echo "ERROR: The Deployment deployments/$TKG_DEPLOYMENT does not have a releated $TKG_DEPLOYMENT file"
  echo "       Please take deployments/tkg-tanzu-demo-hub.yaml as a template."
  exit 1
fi

# --- CHECK ENVIRONMENT VARIABLES ---
if [ -f ~/.tanzu-demo-hub.cfg ]; then
  . ~/.tanzu-demo-hub.cfg
fi

# --- SOURCE MANAGEMENT CLUSTER VARIABLES ---
if [ -f $HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.cfg ]; then
  . $HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.cfg
fi

if [ "$TDH_DEPLOYMENT_CLUSTER_PLAN" == "dev" ]; then
  TDH_TKGMC_CONFIG=$TDH_TKGMC_WC_CONFIG_DEV
else
  TDH_TKGMC_CONFIG=$TDH_TKGMC_WC_CONFIG_PROD
fi

# --- DIRTY FIX ---
export TDH_INFRASTRUCTURE=$TDH_TKGMC_INFRASTRUCTURE
export TDH_DEPLOYMENT_ENV_NAME=$TDH_INFRASTRUCTURE
export TDH_TLS_CERT=tanzu-demo-hub
export TDH_TLS_SECRET=${TDH_TLS_CERT}-tls
export TDH_TLS_ISSUER_NAME=letsencrypt-staging
export TDH_TLS_ISSUER_CONFIG=/tmp/issuer-dns-manager1.yaml

if [ ! -f /tdh_tools_docker_container  ]; then
  echo ""
  echo "Tanzu Demo Hub - Deploy TKG Workload Cluster"
  echo "by Sacha Dubois, VMware Inc,"
  echo "-----------------------------------------------------------------------------------------------------------"

  # --- VERIFY TOOLS AND ACCESS ---
  checkCLIcommands BASIC

  if [ $NATIVE -eq 0 ]; then
    tdh_tools_build

    messagePrint " â–ª Running TDH Tools Docker Container" "tdh-tools:latest $TDHPATH/$CMD_EXEC $CMD_ARGS"

    cid=$(docker ps -a | grep tdh-tools:latest | awk '{ print $1 }')
    [ "$cid" != "" ] && for n in $cid; do docker rm $n -f > /dev/null 2>&1; done

    mkdir -p $HOME/.mc $HOME/.cache $HOME/.config $HOME/.local
    mkdir -p /tmp/docker && chmod a+w /tmp/docker
    docker run -it --rm --name tdh-tools -v /var/run/docker.sock:/var/run/docker.sock tdh-tools:latest  chmod 666 /var/run/docker.sock > /dev/null 2>&1
    #docker run -u $(id -u):$(id -g) --group-add 0 -it --rm --name tdh-tools \
    #   -e "KUBECONFIG=$HOME/.kube/config" --hostname tdh-tools tdh-tools:latest $TDHPATH/$CMD_EXEC $CMD_ARGS
    docker run -u $(id -u):$(id -g) -it --rm --name tdh-tools \
       -v $HOME:$HOME:ro -v $HOME/.local:$HOME/.local:rw -v $HOME/.tanzu-demo-hub:$HOME/.tanzu-demo-hub:rw \
       -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache:$HOME/.cache:rw -v $HOME/.config:$HOME/.config:rw \
       -v $HOME/.aws:$HOME/.aws:rw -v $HOME/.vmware-cna-saas:$HOME/.vmware-cna-saas:rw -v $HOME/.azure:$HOME/.azure:rw \
       -v /tmp:/tmp:rw -v /tmp/docker:$HOME/.docker:rw -v $HOME/.mc:$HOME/.mc:rw -v $HOME/.tanzu:$HOME/.tanzu:rw \
       -v $HOME/.kube-tkg:$HOME/.kube-tkg:rw -v $HOME/.kube:$HOME/.kube:rw \
       -e "KUBECONFIG=$HOME/.kube/config" --hostname tdh-tools tdh-tools:latest $TDHPATH/$CMD_EXEC $CMD_ARGS; ret=$?

    # --- FINISH CURRENT SESSION AS WE RUN AS CONTAINER ---
    exit $ret
  else
    # --- VERYFY ACCESS TO CLOUD ---
    checkTDHenvironment

    # --- VERIFY TOOLS AND ACCESS ---
    checkCloudCLI
    checkCLIcommands TOOLS
    checkCLIcommands TKG
    checkCLIcommands TANZU
    checkCLIcommands TMC
  fi
fi

if [ "$TDH_TKGWC_K8S_VERSION" != "" ]; then 
  tanzu kubernetes-release get 2323 | sed '1d'
  cnt=$(tanzu kubernetes-release get $TDH_TKGWC_K8S_VERSION | sed '1d' | wc -l | sed 's/  *//g') 
  if [ $cnt -eq 0 ]; then 
    cnt=$(tanzu kubernetes-release get | grep -c " $TDH_TKGWC_K8S_VERSION ")
    if [ $cnt -gt 0 ]; then 
      echo "ERROR: Kubernetes Version ($TDH_TKGWC_K8S_VERSION) not found, Please take the 'NAME'"
      echo "       instead of the 'VERSION'."
      echo "       => tanzu kubernetes-release get"
      echo ""
      tanzu kubernetes-release get
      echo "-----------------------------------------------------------------------------------------------------------"
      exit
    else
      echo "ERROR: Kubernetes Version ($TDH_TKGWC_K8S_VERSION) not found, Please choose one from"
      echo "       the 'NAME' Column."
      echo "       => tanzu kubernetes-release get"
      echo ""
      tanzu kubernetes-release get
      echo "-----------------------------------------------------------------------------------------------------------"
      exit
    fi
  fi
else
  TDH_TKGWC_K8S_VERSION=$(tanzu kubernetes-release get | tail -1 | awk '{ print $1 }')
fi

# --- GET TDH_TKGWC_CPIP_ADDRESS FROM NAME TAG ---
if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" ]; then
  if [ "$TDH_TKGWC_NAME_TAG" == "TKG_CLUSTER_01" -o "$TDH_TKGWC_NAME_TAG" == "TKG_CLUSTER_02" -o \
       "$TDH_TKGWC_NAME_TAG" == "TKG_CLUSTER_03" ]; then

    if [ "$TDH_TKGWC_NAME_TAG" == "TKG_CLUSTER_01" ]; then 
      TDH_TKGWC_CPIP_ADDRESS=$VSPHERE_TKGM_WKLD_CLUSTER01_CONTROL_PLANE
      TDH_TKGWC_LB_ADDRESS=$VSPHERE_TKGM_WKLD_CLUSTER01_LOADBALANCER_POOL
    fi

    if [ "$TDH_TKGWC_NAME_TAG" == "TKG_CLUSTER_02" ]; then 
      TDH_TKGWC_CPIP_ADDRESS=$VSPHERE_TKGM_WKLD_CLUSTER02_CONTROL_PLANE
      TDH_TKGWC_LB_ADDRESS=$VSPHERE_TKGM_WKLD_CLUSTER03_LOADBALANCER_POOL
    fi

    if [ "$TDH_TKGWC_NAME_TAG" == "TKG_CLUSTER_04" ]; then 
      TDH_TKGWC_CPIP_ADDRESS=$VSPHERE_TKGM_WKLD_CLUSTER04_CONTROL_PLANE
      TDH_TKGWC_LB_ADDRESS=$VSPHERE_TKGM_WKLD_CLUSTER04_LOADBALANCER_POOL
    fi
  else
    echo "ERROR: Option -tag should be either: TKG_CLUSTER_01, TKG_CLUSTER_02 or TKG_CLUSTER_03"
    usage; exit 0
  fi

  #TDH_TKGWC_CPIP_ADDRESS
  #TDH_TKGWC_NAME_TAG
fi

if [ "$TDH_DEPLOYMENT_CLUSTER_PLAN" == "dev" ]; then 
  cat $HOME/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-dev.yaml $HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml | \
     egrep -v "^#|VSPHERE_CONTROL_PLANE_ENDPOINT" | sed -e '/^$/d' > $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml

  echo "CLUSTER_NAME: $TDH_TKGWC_NAME" >> $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml
  if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" ]; then
    echo "VSPHERE_CONTROL_PLANE_ENDPOINT: $TDH_TKGWC_CPIP_ADDRESS" >> $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml
  fi
else
  cat $HOME/.tanzu/tkg/clusterconfigs/${TDH_TKGMC_NAME}-wc-dev.yaml $HOME/.tanzu-demo-hub/config/${TDH_TKGMC_NAME}.yaml | \
     egrep -v "^#|VSPHERE_CONTROL_PLANE_ENDPOINT" | sed -e '/^$/d' > $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml

  echo "CLUSTER_NAME: $TDH_TKGWC_NAME" >> $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml
  if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" ]; then
    echo "VSPHERE_CONTROL_PLANE_ENDPOINT: $TDH_TKGWC_CPIP_ADDRESS" >> $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml
  fi
fi

messageTitle "Tanzu Kubernetes Grid Deployment"
messagePrint " â–ª Management Cluster Name"               "$TDH_TKGMC_NAME"
messagePrint " â–ª Management Cluster Configuration"      "deployments/${TDH_TKGMC_NAME}.cfg"
messagePrint " â–ª Deployment Configuration"              "deployments/$TKG_DEPLOYMENT"
messagePrint " â–ª Workload Cluster Name"                 "$TDH_TKGWC_NAME"
messagePrint " â–ª Workload Cluster Cloud Config"         "$HOME/.tanzu/tkg/clusterconfigs/$TDH_TKGMC_CONFIG"
messagePrint " â–ª Workload Cluster Configuration"        "deployments/$TKG_DEPLOYMENT"
messagePrint " â–ª Workload Cluster consolidated Config"  "$HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml"

if [ $DEBUG -gt 0 ]; then 
  echo "-----------------------------------------------------------------------------------------------------------"
  cat $HOME/.tanzu/tkg/clusterconfigs/$TDH_TKGMC_CONFIG deployments/$TKG_DEPLOYMENT | egrep -v "^#" | sed -e '/^$/d'
fi

tanzu cluster get $TDH_TKGWC_NAME >/dev/null 2>&1; ret=$?
if [ $ret -ne 0 ]; then  
  echo "-----------------------------------------------------------------------------------------------------------"
  echo "=> tanzu cluster create $TDH_TKGWC_NAME -f $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml --tkr $TDH_TKGWC_K8S_VERSION" 
  tanzu cluster create $TDH_TKGWC_NAME -f $HOME/.tanzu-demo-hub/config/${TDH_TKGWC_NAME}.yaml --tkr $TDH_TKGWC_K8S_VERSION
  echo "-----------------------------------------------------------------------------------------------------------"

  # --- GET CREDENTIALS ---
  tanzu cluster kubeconfig get $TDH_TKGWC_NAME --admin > /dev/null 2>&1
fi

messagePrint " â–ª Set Kubernetes Context"               "${TDH_TKGWC_NAME}-admin@$TDH_TKGWC_NAME"
#tanzu cluster get $TDH_TKGWC_NAME
kubectl config use-context ${TDH_TKGWC_NAME}-admin@$TDH_TKGWC_NAME > /dev/null 2>&1

messagePrint " â–ª Set Kubernetes clusterrolebinding"    "tanzu-demo-hub-privileged-cluster-role-binding"
kubectl create clusterrolebinding tanzu-demo-hub-privileged-cluster-role-binding \
        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated > /dev/null 2>&1


export TDH_ENVNAME=$TDH_TKGMC_ENVNAME

uodateConfigMap tanzu-demo-hub TDH_DOMAIN                         $AWS_HOSTED_DNS_DOMAIN
uodateConfigMap tanzu-demo-hub TDH_ENVNAME                        $TDH_TKGMC_ENVNAME
uodateConfigMap tanzu-demo-hub TDH_DEPLOYMENT_TYPE                "tkg"
uodateConfigMap tanzu-demo-hub TDH_MANAGED_BY_TMC                 "false"

uodateConfigMap tanzu-demo-hub TDH_CLUSTER_NAME                   "$TDH_TKGWC_NAME"
uodateConfigMap tanzu-demo-hub TDH_MANAGEMENT_CLUSTER             "$TDH_TKGMC_NAME"
uodateConfigMap tanzu-demo-hub TDH_PROVISONER_NAME                "ukn"
uodateConfigMap tanzu-demo-hub TDH_MISSION_CONTROL_ACCOUNT_NAME   "ukn"

# --- WHERE SOULD I PLACE THAT DAMMN VARIABLE - sdubois 
#echo "VSPHERE_TKGM_LOADBALANCER_IPPOOL:$VSPHERE_TKGM_LOADBALANCER_IPPOOL"

if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "vSphere" ]; then
  InstallMetallLB
fi

# --- INSTALL K8 SERVICES ---
InstallCertManager
InstallContour

createClusterIssuer
InstallHarborRegistry
getRootCA tanzu-demo-hub-tls
installBuildService
installTanzuDataPostgres
#installSpringCloudGateway
installMinio

if [ "$TDH_TANZU_MISSION_CONTROL_REGISTRATION" == "true" ]; then
  cnt=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE 2>/dev/null | grep -c $TDH_MINIKUBE_PROFILE)
  if [ $cnt -eq 0 ]; then
    tmc cluster attach --name $TDH_MINIKUBE_PROFILE --kubeconfig /Users/sdu/.kube/config -p attached -m attached > /dev/null 2>&1; ret=$?
    if [ $ret -ne 0 ]; then
      tmc cluster delete $TDH_MINIKUBE_PROFILE -p attached -m attached > /dev/null 2>&1

      # --- WAIT FOR THE CLUSTER TO BE DELETED ---
      cnt=1
      while [ $cnt -ne 0 ]; do
        cnt=$(tmc cluster list --name $TDH_MINIKUBE_PROFILE 2>/dev/null | grep -c $TDH_MINIKUBE_PROFILE)
        sleep 20
      done

      tmc cluster attach --name $TDH_MINIKUBE_PROFILE --kubeconfig /Users/sdu/.kube/config -p attached -m attached > /dev/null 2>&1; ret=$?
      if [ $ret -ne 0 ]; then
        echo "ERROR: TMC failed to attach cluster"
        echo "       => tmc cluster reattach --name $TDH_MINIKUBE_PROFILE --kubeconfig /Users/sdu/.kube/config -p attached -m attached "
        exit
      fi
    fi
  fi
fi


exit

