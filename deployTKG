#!/bin/bash
# ############################################################################################
# File: ........: deployTKG
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TKG Workload Cluster
# ############################################################################################

if [ ! -f /tkg_software_installed ]; then 
  echo "ERROR: $0 Needs to run on a TKG Jump Host"; exit 
fi

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)

. $TANZU_DEMO_HUB/functions

usage() {
  echo ""
  echo "USAGE: $0 [options] -d <deployment> -c <cluster-config> -n <cluster-name>"
}

listClusterConfig() {
  echo
  printf "%-31s %-5s %-15s %-20s %-5s %s\n" "CONFIURATION" "DESCRIPTION" 
  echo "-----------------------------------------------------------------------------------------------------------"

  for deployment in $(ls -1 ${TDHPATH}/deployments/tkg-*.cfg); do
    . $deployment

    dep=$(basename $deployment)

    printf "%-31s %-5s %-15s %-20s %-5s %s\n" $dep "$TDH_TKGWC_DESCRIPTION"
  done

  echo "-----------------------------------------------------------------------------------------------------------"
}

listDeployments() {
  echo
  printf "%-31s %-5s %-15s %-22s %-5s %s\n" "DEPLOYMENTS" "CLOUD" "REGION" "MGMT-CLUSTER" "PLAN" "status"
  echo "-----------------------------------------------------------------------------------------------------------"

  for deployment in $(ls -1 ${TDHPATH}/deployments/tkgmc-*.cfg); do
    . $deployment

    dep=$(basename $deployment)
    sdp="undeployed"
    smc="inactive"

    stt=$(tkg get mc -q $TDH_TKGMC_NAME -o json --config ${TDHPATH}/config/$TDH_TKGMC_CONFIG | jq -r '.[].status')
    if [ "${stt}" != "" ]; then 
      if [ "${stt}" == "Success" ]; then smc="deployed/active"; else smc="deployed/$stt"; fi
    else
      smc=""
    fi

    printf "%-31s %-5s %-15s %-22s %-5s %s\n" $dep $TDH_TKGMC_INFRASTRUCTURE $TDH_TKGMC_REGION $TDH_TKGMC_NAME \
           $TDH_TKGMC_PLAN "$smc"
  done

  echo "-----------------------------------------------------------------------------------------------------------"
}

echo ""
echo "Tanzu Demo Hub - Deploy TKG Workload Cluster"
echo "by Sacha Dubois, VMware Inc,"
echo "-----------------------------------------------------------------------------------------------------------"

while [ "$1" != "" ]; do
  case $1 in
    -d)  TKG_DEPLOYMENT=$2;;
    -c)  TKG_WC_CLUSTER=$2;;
    -n)  TDH_TKGWC_NAME=$2;;
  esac
  shift
done

if [ "${TKG_DEPLOYMENT}" == "" -o "${TKG_WC_CLUSTER}" == "" -o "${TDH_TKGWC_NAME}" == "" ]; then
  if [ "${TKG_DEPLOYMENT}" == "" ]; then 
    listDeployments
  fi

  if [ "${TKG_WC_CLUSTER}" == "" ]; then 
    listClusterConfig
  fi
  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ ! -f ${TDHPATH}/deployments/${TKG_DEPLOYMENT} ]; then
  echo "ERROR: Deployment file $TKG_DEPLOYMENT can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${TKG_DEPLOYMENT}
fi

# --- VERIFY DEPLOYMENT ---
echo "${TDHPATH}/deployments/${TKG_WC_CLUSTER}"
if [ ! -f ${TDHPATH}/deployments/${TKG_WC_CLUSTER} ]; then
  echo "ERROR: Config file $TKG_WC_CLUSTER can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${TKG_WC_CLUSTER}
fi

# --- CHECK ENVIRONMENT VARIABLES ---
if [ -f ~/.tanzu-demo-hub.cfg ]; then
  . ~/.tanzu-demo-hub.cfg
fi

export TDH_OPTIONS=""
export TDH_DEPLOYMENT_ENV_NAME=$TDH_TKGMC_INFRASTRUCTURE
export TKG_CONFIG=${TDHPATH}/config/$TDH_TKGMC_CONFIG

if [ "${TDH_TKGWC_PLAN}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --plan=$TDH_TKGWC_PLAN"; fi
if [ "${TDH_TKGWC_KUBERNETES}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --kubernetes-version=$TDH_TKGWC_KUBERNETES"; fi
if [ "${TDH_TKGWC_CONTROPLANE}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --controlplane-machine-count=$TDH_TKGWC_CONTROPLANE"; fi
if [ "${TDH_TKGWC_WORKERNODES}" != "" ]; then TDH_OPTIONS="$TDH_OPTIONS --worker-machine-count=$TDH_TKGWC_WORKERNODES"; fi

# --- VERIFY TKG MANAGEMENT CLUSTER ---
stt=$(tkg get mc --name $TDH_TKGMC_NAME -o json | jq -r '.[].status')
con=$(tkg get mc --name $TDH_TKGMC_NAME -o json | jq -r '.[].context')
isc=$(tkg get mc --name $TDH_TKGMC_NAME -o json | jq -r '.[].true')
if [ "${stt}" != "Success" ]; then 
  echo "ERROR: $0 TKG Management Cluster deployment was not Successfil"; exit 1
fi

if [ "${isc}" != "true" ]; then 
  tkg set mc -c "$con" $TDH_TKGMC_NAME > /dev/null 2>&1
fi

# --- VERIFY TKG WORKLOAD CLUSTER ---
stt=$(tkg get cluster -o json | jq -r --arg key $TDH_TKGWC_NAME '.[] | select(.name == $key).status')
if [ "${stt}" == "" ]; then 
  messageTitle "Creating TKG Cluster ($TDH_TKGWC_NAME)"

  [ "$TDH_TKGWC_INGRESS_CONTOUR" == "true" ] &&   
  tkg create cluster $TDH_TKGWC_NAME $TDH_OPTIONS
  tkg get credentials $TDH_TKGWC_NAME
  kubectl config use-context $con > /dev/null 2>&1
else
  messageTitle "Verify TKG Cluster ($TDH_TKGWC_NAME)"
  kubectl config use-context $con > /dev/null 2>&1
fi

echo "-----------------------------------------------------------------------------------------------------------"
tkg get clusters
echo "-----------------------------------------------------------------------------------------------------------"

if [ "${TDH_TKGWC_INGRESS_CONTOUR}" == "true" ]; then 

  stt=$(kubectl get ns -o json | jq -r '.items[] | select(.metadata.name == "vmware-system-tmc").status.phase')
  if [ "${stt}" == "" ]; then
    cd extensions/$TDH_TKGWC_EXTENSIONS/extensions
    # --- INSTALL TMC EXTENSION MANAGER ---
    kubectl apply -f tmc-extension-manager.yaml >/dev/null 2>&1
    if [ $? -ne 0 ]; then 
      messageMessage "Install Ingress Contour" "failed"
      echo "ERROR: Installation of TMC Extension manager failed"
      echo "       => cd $TDHPATH/extensions/$TDH_TKGWC_EXTENSIONS"
      echo "       => kubectl apply -f tmc-extension-manager.yaml"
      exit
    else
      messageMessage "Install Ingress Contour" "completed"
    fi
  else
    messageMessage "Verify Ingress Contour"  "installed/running"
  fi

#  kubectl get ns -o json | jq -r '.items[].metadata | select(.name == "tkg-system").uid'

#capi-kubeadm-bootstrap-system
#capi-kubeadm-control-plane-system
#capi-system
#capi-webhook-system
#capz-system
#cert-manager
#default
#kube-node-lease
#kube-public
#kube-system
#tkg-system
#tkg-system-public
#tkg-system-telemetry



  if [ "${TDH_TKGMC_INFRASTRUCTURE}" == "Azure" ]; then 
    

echo "TDH_TKGMC_INFRASTRUCTURE:$TDH_TKGMC_INFRASTRUCTURE"
echo "TDH_TKGWC_EXTENSIONS:$TDH_TKGWC_EXTENSIONS"
echo gaga

  fi
fi

exit

  messagePrint " - Install Ingress NGINX"    "$TDH_TKGWC_INGRESS_NGINX" 

echo "tkg create cluster $TDH_TKGWC_NAME $TDH_OPTIONS"

exit

export AZURE_SUBSCRIPTION_ID="1fc6fab2-068c-4d73-953d-d9c3f4a21f17"
export AZURE_TENANT_ID="29248f74-371f-4db2-9a50-c62a6877a0c1"
export AZURE_CLIENT_ID="3487faeb-52ab-44a1-9aac-210c4d2ea65e"
export AZURE_CLIENT_ID="db9f9d6c-6558-4cf6-bc35-d5602fd096c7"
export AZURE_CLIENT_SECRET="~Q_sgk4ac__Gmz5gn8lctN6u_N0N_.UP2e"
#export AZURE_CLIENT_SECRET="pivotal"
export AZURE_REGION="westeurope"
export AZURE_LOCATION="westeurope"
export TKG_CONFIG=/Users/sdubois/workspace/tanzu-demo-hub/config/tkgmc-azure-westeurope.yaml
export TKG_CONFIG=/Users/sdubois/workspace/tanzu-demo-hub/config/tkgmc-dev-azure-westeurope.yaml

tkg config cluster tkgwc01 --plan=dev
tkg create cluster tkgwc01 --plan=dev

