---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-music
  labels:
    app.kubernetes.io/name: spring-music
    app.kubernetes.io/instance: spring-music
    app.kubernetes.io/managed-by: spring-music
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: spring-music
      app.kubernetes.io/instance: spring-music
  template:
    metadata:
      labels:
        app.kubernetes.io/name: spring-music
        app.kubernetes.io/instance: spring-music
    spec:
      containers:
        - name: spring-music
          image: "harbor.apps-contour.local.pcfsdu.com/library/spring-music:latest"
          terminationMessagePolicy: FallbackToLogsOnError
          imagePullPolicy: IfNotPresent
          command: ['/app/start.sh']
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: INSTANCE_NAME
              valueFrom:
                secretKeyRef:
                  name: DB_INSTANCE-db-secret
                  key: instancename
            - name: NAMESPACE_NAME
              valueFrom:
                secretKeyRef:
                  name: DB_INSTANCE-db-secret
                  key: namespace
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: DB_INSTANCE-db-secret
                  key: dbname
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: DB_INSTANCE-db-secret
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: DB_INSTANCE-db-secret
                  key: password
            - name: USE_PIVOTAL_POSTGRES
              value: "true"
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
      imagePullSecrets:
        - name: regsecret
---
apiVersion: v1
kind: Service
metadata:
  name: spring-music-service
  labels:
    app.kubernetes.io/name: spring-music-service
    app.kubernetes.io/instance: spring-music
    app.kubernetes.io/managed-by: spring-music
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: spring-music
    app.kubernetes.io/instance: spring-music
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/force-ssl-redirect: "true"
    kubernetes.io/ingress.class: contour
  name: tdh-spring-music
spec:
  rules:
  - host: spring-music.DOMAIN
    http:
      paths:
      - backend:
          service:
            name: spring-music-service
            port:
              name: http
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - spring-music.DOMAIN
    secretName: tanzu-demo-hub-tls


