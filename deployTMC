#!/bin/bash
# ############################################################################################
# File: ........: deployTMC
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy TKG Workload Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=0
export NATIVE=0
export TDH_DEPLOYMENT_ENV_NAME="awstkg"
export TDH_DEPLOYMENT_CLOUD="AWS"
export DEPLOY_PCF_DEPLOYMENT=aws_tkg_default.cfg
export CMD_EXEC=$(basename $0)
export CMD_ARGS=$*

unset TMC_MANAGEMENT_CLUSTER
unset TMC_ACCOUNT_NAME  

. $TANZU_DEMO_HUB/functions

usage() {
  echo ""
  echo "USAGE: $0 [options] -d <tmc-deployment>.cfg -c <tkg-configuration>.cfg [--debug]"
  echo "            Options:  -d <tmc-deployment.cfg>     # Tanzu Mission Control (TMC) Deployment Name"
  echo "                      -c <tkg-configuration.cfg>  # Tanzu Kubernetes Grid (TKG) Configuration"
  echo "                      -e <sub-domain>             # DNS Subdomain (<xyz>.domainname>
  echo ""
  echo "                      --debug                     # default (disabled)"
  echo "                      --clean                     # cleanuo the deployment"
  echo ""
}


listClusterConfig() {
  echo
  printf "%-31s %-7s %-15s %-20s %-5s %s\n" "TKG-CONFIGURATION" "PLAN" "DESCRIPTION"
  messageLine

  for deployment in $(ls -1 ${TDHPATH}/deployments/tkg-*.cfg | grep -v "tkgmc-"); do
    TDH_DEPLOYMENT_DESCRIPTION=$(egrep "^TDH_DEPLOYMENT_DESCRIPTION=" $deployment | awk -F'=' '{ print $2 }' | sed 's/"//g')
    TDH_DEPLOYMENT_CLUSTER_PLAN=$(egrep "^TDH_DEPLOYMENT_CLUSTER_PLAN=" $deployment | awk -F'=' '{ print $2 }')

    dep=$(basename $deployment)

    printf "%-31s %-7s %-15s %-20s %-5s %s\n" $dep "$TDH_DEPLOYMENT_CLUSTER_PLAN" "$TDH_DEPLOYMENT_DESCRIPTION"
  done

  messageLine
}

listDeployments() {
  echo
  printf "%-31s %-7s %-25s %s\n" "TMC-DEPLOYMENT" "CLOUD" "MANAGEMENT-CLUSTER" "STATUS"
  messageLine

  for deployment in $(ls -1 ${TDHPATH}/deployments/tmc-*.cfg ${HOME}/.tanzu-demo-hub/config/tmc* 2>/dev/null ); do
    TDH_TKGMC_INFRASTRUCTURE=$(egrep "^TDH_TKGMC_INFRASTRUCTURE=" $deployment | awk -F'=' '{ print $2 }' | sed 's/"//g')
    TDH_TKGMC_ENVNAME=$(egrep "^TDH_TKGMC_ENVNAME=" $deployment | awk -F'=' '{ print $2 }' | sed 's/"//g')
    TDH_DEPLOYMENT_CLOUD=$(egrep "^TDH_DEPLOYMENT_CLOUD=" $deployment | awk -F'=' '{ print $2 }' | sed 's/"//g')
    TDH_MANAGEMENT_CLUSTER=$(egrep "^TDH_MANAGEMENT_CLUSTER=" $deployment | awk -F'=' '{ print $2 }')

    tmc managementcluster get $TDH_MANAGEMENT_CLUSTER > /dev/null 2>&1
    if [ $? -ne 0 ]; then 
      stt="unavailable"
    else
      st1=$(tmc managementcluster get $TDH_MANAGEMENT_CLUSTER -o json | jq -r '.status.phase') 
      st2=$(tmc managementcluster get $TDH_MANAGEMENT_CLUSTER -o json | jq -r '.status.health') 
      stt="$st1 / $st2"
    fi

    dep=$(basename $deployment)

    printf "%-31s %-7s %-25s %s\n" $dep $TDH_DEPLOYMENT_CLOUD $TDH_MANAGEMENT_CLUSTER "$stt"
  done

  messageLine
}

listClusters() {
  #cat /tmp/2 | jq -r '.spec | select(.provisionedcluster.accountName == "smidgley-aws").provisionedcluster.accountName'
  cnt=$(tmc cluster list --group sadubois --output json | jq -r '."totalCount"') 
  cnt=$(tmc cluster list --output json | jq -r '."totalCount"') 
  if [ $cnt -gt 0 ]; then
    TMPFILE=/tmp/tdh_listCluster.tmp; rm -f $TMPFILE

    echo "NAME                 KUBERNETES           PROVIDER   CREDENTIALS          REGION          STATE"
    echo "-----------------------------------------------------------------------------------------------------------"

    tmc cluster list --group $TMC_CLUSTER_GROUP --output json > $TMPFILE
    tmc cluster list --output json > $TMPFILE
    for cln in $(jq -r '.clusters[] | select(.status.type == "PROVISIONED").fullName.name' $TMPFILE | head -5); do
      ver=$(jq -r --arg cluster "$cln" '.clusters[] | select(.fullName.name == $cluster)' $TMPFILE | \
            jq -r '.spec.provisionedcluster.version')
      acc=$(jq -r --arg cluster "$cln" '.clusters[] | select(.fullName.name == $cluster)' $TMPFILE | \
            jq -r '.spec.provisionedcluster.accountName')
      cpv=$(jq -r --arg cluster "$cln" '.clusters[] | select(.fullName.name == $cluster)' $TMPFILE | \
            jq -r '.status.agent.metadata.cloudProvider')
      reg=$(jq -r --arg cluster "$cln" '.clusters[] | select(.fullName.name == $cluster)' $TMPFILE | \
            jq -r '.status.agent.metadata.region')
      stt=$(jq -r --arg cluster "$cln" '.clusters[] | select(.fullName.name == $cluster)' $TMPFILE | \
            jq -r '.status.status.state.state')

      printf "%-20s %-20s %-10s %-20s %-15s %-10s\n" $cln $ver $cpv $acc $reg $stt

    done


#    tmc cluster list --output json | jq -r '.clusters[1] | [.fullName.name,.spec.provisionedcluster.version]'

#  tmc cluster list --group $TMC_CLUSTER_GROUP
  echo "-----------------------------------------------------------------------------------------------------------"

    # --- CLEANUP ---
    rm -f $TMPFILE
  fi
}

while [ "$1" != "" ]; do
  case $1 in
    -c)  TKG_DEPLOYMENT=$2;;
    -d)  TMC_DEPLOYMENT=$2;;
    -e)  DNS_SUBDOMAIN=$2;;
    --clean) DEPLOY_TKG_CLEAN=1;;
    --debug) DEBUG=1;;
    --native)      NATIVE=1;;
  esac
  shift
done

if [ "${TKG_DEPLOYMENT}" == "" -o "${TMC_DEPLOYMENT}" == "" ]; then
  if [ "${TKG_DEPLOYMENT}" == "" ]; then
    listDeployments
  fi

  if [ "${TMC_DEPLOYMENT}" == "" ]; then
    listClusterConfig
  fi
  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ -f ${TDHPATH}/deployments/${TMC_DEPLOYMENT} -o ${HOME}/.tanzu-demo-hub/config/${TMC_DEPLOYMENT} ]; then
  if [ -f ${TDHPATH}/deployments/${TMC_DEPLOYMENT} ]; then 
    TMC_DEPLOYMENT_CONFIG=${TDHPATH}/deployments/${TMC_DEPLOYMENT}
  else
    TMC_DEPLOYMENT_CONFIG=${HOME}/.tanzu-demo-hub/config/${TMC_DEPLOYMENT}
  fi
else
  echo "ERROR: Deployment file $pcf_deployment can not be found in the directory:"
  echo "       ${TDHPATH}/deployments or ${HOME}/.tanzu-demo-hub/config"
  exit 1
fi

if [ -f ${TDHPATH}/deployments/$TKG_DEPLOYMENT ]; then
  . ${TDHPATH}/deployments/$TKG_DEPLOYMENT
fi


cnt=$(egrep -c "^TDH_DEPLOYMENT_CLOUD=" $TMC_DEPLOYMENT_CONFIG)
if [ $cnt -eq 0 ]; then
  echo "ERROR: ${TMC_DEPLOYMENT_CONFIG} is not a correct TANZU-DEMO-HUB deployment configuration file"
  exit 1
else
  missing_variables=0

  . ${TMC_DEPLOYMENT_CONFIG}
  export TMC_CLUSTER_GROUP=$TDH_DEPLOYMENT_CLUSTERGROUP

  # --- CHECK ENVIRONMENT VARIABLES ---
  if [ -f ~/.tanzu-demo-hub.cfg ]; then
    . ~/.tanzu-demo-hub.cfg
  fi

  # CHECK AWS ACCOUNTS
  if [ "$TDH_DEPLOYMENT_CLOUD" == "AWS" ]; then 
    if [ "${AWS_ACCESS_KEY}" == "" -o "${AWS_SECRET_KEY}" == "" -o "${AWS_REGION}" == "" ]; then
      missing_variables=1

      echo ""
      echo "  MISSING ENVIRONMENT-VARIABES  DESCRIPTION        "
      echo "  --------------------------------------------------------------------------------------------------------------"

      if [ "${AWS_ACCESS_KEY}" == "" ]; then
        echo "  AWS_ACCESS_KEY       (required) AWS Access Key"
      fi

      if [ "${AWS_SECRET_KEY}" == "" ]; then
        echo "  AWS_SECRET_KEY       (required) AWS Secret Key"
      fi

      if [ "${AWS_REGION}" == "" ]; then
        echo "  AWS_REGION           (required) AWS Region"
      fi

      if [ "${AWS_SSH_KEY_NAME}" == "" ]; then
        echo "  AWS_SSH_KEY_NAME     (required) AWS SSH Key Name"
      fi

      if [ "${AWS_SSH_KEY_FILE}" == "" ]; then
        echo "  AWS_SSH_KEY_FILE     (required) AWS SSH Key File"
      fi
      echo ""
    fi
  fi

  if [ ${missing_variables} -eq 1 ]; then
    echo "  --------------------------------------------------------------------------------------------------------------"
    echo "  IMPORTANT: Please set the missing environment variables either in your shell or in the tanzu-demo-hub"
    echo "             configuration file ~/.tanzu-demo-hub.cfg and set all variables with the 'export' notation"
    echo "             ie. => export AZURE_PKS_TLS_CERTIFICATE=/home/demouser/certs/cert.pem"
    echo "  --------------------------------------------------------------------------------------------------------------"
    exit 1
  fi
fi

if [ "$DNS_SUBDOMAIN" != "" ]; then 
  TDH_ENVNAME=$DNS_SUBDOMAIN
fi 

export TDH_DEPLOYMENT_ENV_NAME=$TDH_INFRASTRUCTURE
export TDH_TLS_CERT=tanzu-demo-hub
export TDH_TLS_SECRET=${TDH_TLS_CERT}-tls
export TDH_TLS_ISSUER_NAME=letsencrypt-staging
export TDH_TLS_ISSUER_CONFIG=/tmp/issuer-dns-manager1.yaml

if [ ! -f /tdh_tools_docker_container  ]; then
  echo ""
  echo "Tanzu Demo Hub - Deploy TKG Cluster with Tanzu Mission Control (TMC)"
  echo "by Sacha Dubois, VMware Inc,"
  messageLine

  # --- VERIFY TOOLS AND ACCESS ---
  verify_docker
  checkCLIcommands        BASIC
  checkKubernetesServices registry_docker

  if [ $NATIVE -eq 0 ]; then
    tdh_tools_build

    messagePrint " â–ª Running TDH Tools Docker Container" "tdh-tools:latest $TDHPATH/$CMD_EXEC $CMD_ARGS"

    cid=$(docker ps -a | grep tdh-tools:latest | awk '{ print $1 }')
    [ "$cid" != "" ] && for n in $cid; do docker rm $n -f > /dev/null 2>&1; done

    mkdir -p $HOME/.mc $HOME/.cache $HOME/.config $HOME/.local
    mkdir -p /tmp/docker && chmod a+w /tmp/docker
    docker run -it --rm --name tdh-tools -v /var/run/docker.sock:/var/run/docker.sock tdh-tools:latest  chmod 666 /var/run/docker.sock > /dev/null 2>&1
    #docker run -u $(id -u):$(id -g) --group-add 0 -it --rm --name tdh-tools \
    #   -e "KUBECONFIG=$HOME/.kube/config" --hostname tdh-tools tdh-tools:latest $TDHPATH/$CMD_EXEC $CMD_ARGS
    docker run -u $(id -u):$(id -g) -it --rm --name tdh-tools \
       -v $HOME:$HOME:ro -v $HOME/.local:$HOME/.local:rw -v $HOME/.tanzu-demo-hub:$HOME/.tanzu-demo-hub:rw \
       -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache:$HOME/.cache:rw -v $HOME/.config:$HOME/.config:rw \
       -v $HOME/.aws:$HOME/.aws:rw -v $HOME/.vmware-cna-saas:$HOME/.vmware-cna-saas:rw -v $HOME/.azure:$HOME/.azure:rw \
       -v /tmp:/tmp:rw -v /tmp/docker:$HOME/.docker:rw -v $HOME/.mc:$HOME/.mc:rw -v $HOME/.tanzu:$HOME/.tanzu:rw \
       -v $HOME/.kube-tkg:$HOME/.kube-tkg:rw -v $HOME/.kube:$HOME/.kube:rw -v $HOME/.govmomi:$HOME/.govmomi:rw \
       -v $HOME/.ssh:$HOME/.ssh:rw \
       -e "KUBECONFIG=$HOME/.kube/config" --hostname tdh-tools tdh-tools:latest $TDHPATH/$CMD_EXEC $CMD_ARGS; ret=$?

    # --- FINISH CURRENT SESSION AS WE RUN AS CONTAINER ---
    exit $ret
  else
    # --- VERYFY ACCESS TO CLOUD ---
    checkTDHenvironment

    # --- VERIFY TOOLS AND ACCESS ---
    checkCloudCLI
    checkCLIcommands TOOLS
    checkCLIcommands TKG
    checkCLIcommands TANZU
    checkCLIcommands TMC
  fi
fi

# --- CLEANUP KUNECONFIG ---
cleanKubeconfig


tmcCheckLogin
checkTDHAccess
checkTMCAccess

checkTMCcontext
tmcCreateCluster
getTDHClusterCredentials

kubectl create clusterrolebinding tanzu-demo-hub-privileged-cluster-role-binding \
        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated > /dev/null 2>&1

uodateConfigMap tanzu-demo-hub TDH_DOMAIN               $AWS_HOSTED_DNS_DOMAIN
uodateConfigMap tanzu-demo-hub TDH_ENVNAME              $TDH_ENVNAME
uodateConfigMap tanzu-demo-hub TDH_DEPLOYMENT_TYPE      "tmc"
uodateConfigMap tanzu-demo-hub TDH_MANAGED_BY_TMC       "true"

uodateConfigMap tanzu-demo-hub TDH_CLUSTER_NAME                   "$TDH_CLUSTER_NAME"
uodateConfigMap tanzu-demo-hub TDH_MANAGEMENT_CLUSTER             "$TDH_MANAGEMENT_CLUSTER"
uodateConfigMap tanzu-demo-hub TDH_PROVISIONER_NAME               "$TDH_PROVISIONER_NAME"
uodateConfigMap tanzu-demo-hub TDH_MISSION_CONTROL_ACCOUNT_NAME   "$TMC_ACCOUNT_NAME"

InstallCertManager
[ "${TDH_DEPLOYMENT_CLOUD}" != "vSphere" ] && InstallContour
createClusterIssuer
InstallHarborRegistry
getRootCA tanzu-demo-hub-tls
installBuildService
installTanzuDataPostgres
installSpringCloudGateway
installMinio
installKubeapps
installJenkins

checkTMCintegration      TO    ## Tanzu Observability (Wavefront)
checkTMCintegration      TDP   ## Tanzu Data Protection
checkTMCintegration      TCI   ## Tanzu Cluster Inspection

echo "-----------------------------------------------------------------------------------------------------------"
echo "Tanzu Kubernetes Grid Cluster ($TDH_CLUSTER_NAME) build completed"
echo "-----------------------------------------------------------------------------------------------------------"
echo "1.) Set KUBECONFIG and set the cluster context"
echo "    => export KUBECONFIG=/tmp/${TDH_CLUSTER_NAME}.kubeconfig:~/.kube/config"
echo "    => kubectl config use-context $TDH_CLUSTER_NAME"
echo "    => kubectl config get-contexts"
echo "2.) Relaxing Pod Security in cluster ($TDH_CLUSTER_NAME)"
echo "    # Allow Privileged Pods for the Cluster"
echo "    => kubectl create clusterrolebinding tanzu-demo-hub-privileged-cluster-role-binding \\"
echo "        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated"
echo "    # Allow Privileged Pods for a Namespace (my-namespace)"
echo "    => kubectl create rolebinding tanzu-demo-hub-privileged-my-namespace-role-binding \\"
echo "        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated -n my-namespace"
echo "3.) Delete Cluster if not used anymore"
echo "    => tmc cluster delete -m $TDH_MANAGEMENT_CLUSTER -p $TDH_PROVISIONER_NAME $TDH_CLUSTER_NAME"

#kubectl rollout restart deployment echoserver-1 -n contour-ingress-demo
#kubectl get pods -n contour-ingress-demo
#kubectl create rolebinding tanzu-demo-hub-privileged-my-namespace-role-binding --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated -n contour-ingress-demo


exit

  # --- CHECK CLOUD AND JUMP SERVER ---
  checkCloudAccess
  configureJumpHost


tmc managementcluster deregister tkgmc-vsphere-sadubois


