#!/bin/bash
# ############################################################################################
# File: ........: deployMiniKube
# Language .....: bash
# Author .......: Sacha Dubois, VMware
# Description ..: Tanzu Demo Hub - Deploy K8S Cluster
# ############################################################################################

export TANZU_DEMO_HUB=$(cd "$(pwd)/$(dirname $0)"; pwd)
export TDHPATH=$(cd "$(pwd)/$(dirname $0)"; pwd)
export DEBUG=1
export START_COMMAND="$*"

export K8S_CLEAN_DEPLOYMENT=false

export DEBUG=0

. $TANZU_DEMO_HUB/functions

listMiniKubeDeployments() {
  printf "%-32s %-8s  %-15s %-20s %-5s %s\n" "DEPLOYMENT" "PLATFORM" "PROFILE" "MGMT-CLUSTER" "PLAN" "CONFIGURATION"
  echo "----------------------------------------------------------------------------------------------------------------"
  for deployment in $(ls -1 ${TDHPATH}/deployments/minikube*.cfg) ; do
    mcr=$(egrep "^TDH_MINIKUBE_PROFILE=" $deployment | awk -F= '{ print $NF }')

    dep=$(basename $deployment)

    printf "%-32s %-8s  %-15s %-20s %-5s %s\n" $dep minikube $mcr "n/a" "n/a" \
           "$TDH_TKGMC_CONFIG"
  done

}

usage() {
  echo ""
  echo "USAGE: $0 [options] -d <deployment> [--clean|--debug]"
}

echo ""
echo "Tanzu Demo Hub - Deploy MiniKube cluster"
echo "by Sacha Dubois, VMware Inc,"
echo "-----------------------------------------------------------------------------------------------------------"

while [ "$1" != "" ]; do
  case $1 in
    -d)            K8S_DEPLOYMENT=$2;;
    --clean)       K8S_CLEAN_DEPLOYMENT=true;;
    --clean-cert)  K8S_CLEAN_CERTIFICATES=true;;
    --debug)       DEBUG=1;;
  esac
  shift
done

if [ "${K8S_DEPLOYMENT}" == "" ]; then
  listMiniKubeDeployments

  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ ! -f ${TDHPATH}/deployments/${K8S_DEPLOYMENT} ]; then
  echo "ERROR: Deployment file $K8S_DEPLOYMENT can not be found in ${TDHPATH}/deployments"
  exit 1
else
  . ${TDHPATH}/deployments/${K8S_DEPLOYMENT}
fi

# --- CHECK ENVIRONMENT VARIABLES ---
if [ -f ~/.tanzu-demo-hub.cfg ]; then
  . ~/.tanzu-demo-hub.cfg
fi

InstallContour_delete_me() {
  if [ "$TDH_SERVICE_INGRESS_CONTOUR" != "true" ]; then
    uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_ENABLED        "false"
    return
  fi

  NAMESPACE=ingress-contour
  
  kubectl get ns $NAMESPACE > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    # --- INSTALL CONTOUR INGRESS ---
    messageTitle "Install Ingress Contour"
    kubectl create ns $NAMESPACE > /dev/null 2>&1
    helm install ingress bitnami/contour -n $NAMESPACE --version 3.3.1 > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to install bitnami/contour"
      echo "       => helm install ingress bitnami/contour -n $NAMESPACE --version 3.3.1"
      exit
    fi

    cnt=0
    while [ $cnt -eq 0 ]; do
      cnt=$(kubectl get pods -n ingress-contour | sed 1d | grep -vc Running)
      if [ $cnt -eq 0 ]; then cnt=1; fi
      sleep 5
    done
  fi

  ver=$(helm -n $NAMESPACE ls -o json | jq -r '.[].app_version')
  crt=$(helm -n $NAMESPACE ls -o json | jq -r '.[].chart')
  stt=$(helm -n $NAMESPACE ls -o json | jq -r '.[].status')
  dat=$(helm -n $NAMESPACE ls -o json | jq -r '.[].updated')

  messageTitle "Verify Ingress Contour"
  messagePrint " ▪ Ingress Contour Namespace:"         "$NAMESPACE"
  messagePrint " ▪ Ingress Contour Helm Chart:"        "$crt"
  messagePrint " ▪ Ingress Contour Version:"           "$ver"
  messagePrint " ▪ Ingress Contour Status:"            "$stt"
  messagePrint " ▪ Ingress Contour Installed/Updated:" "$dat"

  # --- VERIFY DNS DOMAIN ---
  verifyHostedZone ${TDH_ENVNAME}.$AWS_HOSTED_DNS_DOMAIN

  # --- SET DNS RECORD ---
  ipa=$(kubectl describe svc ingress-contour-envoy --namespace ingress-contour | grep Ingress | awk '{print $3}')
  setDNSrecord "$ipa" "${TDH_ENVNAME}" "${AWS_HOSTED_DNS_DOMAIN}" "*.apps-contour" "A"

  # --- STORE SETTINGS IN CONFIGMAP ---
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_ENABLED        "true"
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_LB_IP          "$ipa"
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_LB_DOMAIN      "apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_NAMESPACE      "$NAMESPACE"
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_CHART_NAME     "$crt"
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_CHART_VERSION  "$ver"
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_CHART_STATUS   "$stt"
  uodateConfigMap tanzu-demo-hub TDH_INGRESS_CONTOUR_CHART_UPDATE   "$dat"
}

InstallCertManager_delete_me() {
  NAMESPACE=cert-manager 

  kubectl get ns $NAMESPACE > /dev/null 2>&1
  if [ $? -ne 0 ]; then 
    # --- INSTALL CONTOUR INGRESS ---
    messageTitle "Install Cert Manager"

    kubectl create ns $NAMESPACE > /dev/null 2>&1
    helm repo add jetstack https://charts.jetstack.io -n $NAMESPACE > /dev/null 2>&1
    #helm install cert-manager jetstack/cert-manager --namespace cert-manager \
    #   --version v1.0.2 --set installCRDs=true > /dev/null 2>&1

    helm install cert-manager jetstack/cert-manager -n cert-manager --version v1.1.0 --set installCRDs=true > /dev/null 2>&1
    if [ $? -ne 0 ]; then  
      echo "ERROR: failed to install jetstack/cert-manager "
      echo "       => helm install cert-manager jetstack/cert-manager --namespace cert-manager \\"
      echo "          --version v1.1.0 --set installCRDs=true"
      exit
    fi

    cnt=0
    while [ $cnt -eq 0 ]; do
      cnt=$(kubectl get pods -n $NAMESPACE | sed 1d | grep -vc Running)
      if [ $cnt -eq 0 ]; then cnt=1; fi

      sleep 5
    done
  fi

  ver=$(helm -n cert-manager ls -o json | jq -r '.[].app_version')
  crt=$(helm -n cert-manager ls -o json | jq -r '.[].chart')
  stt=$(helm -n cert-manager ls -o json | jq -r '.[].status')
  dat=$(helm -n cert-manager ls -o json | jq -r '.[].updated')

  messageTitle "Verify Cert Manager"
  messagePrint " ▪ Cert Manager Namespace:"         "$NAMESPACE"
  messagePrint " ▪ Cert Manager Helm Chart:"        "$crt"
  messagePrint " ▪ Cert Manager Version:"           "$ver"
  messagePrint " ▪ Cert Manager Status:"            "$stt"
  messagePrint " ▪ Cert Manager Installed/Updated:" "$dat"
    
  # --- STORE SETTINGS IN CONFIGMAP ---
  uodateConfigMap tanzu-demo-hub TDH_CERTMANAGER_ENABLED        "true"
  uodateConfigMap tanzu-demo-hub TDH_CERTMANAGER_NAMESPACE      "$NAMESPACE"
  uodateConfigMap tanzu-demo-hub TDH_CERTMANAGER_CHART_NAME     "$crt"
  uodateConfigMap tanzu-demo-hub TDH_CERTMANAGER_CHART_VERSION  "$ver"
  uodateConfigMap tanzu-demo-hub TDH_CERTMANAGER_CHART_STATUS   "$stt"
  uodateConfigMap tanzu-demo-hub TDH_CERTMANAGER_CHART_UPDATE   "$dat"
}

InstallMetallb() {
  adr=$(kubectl get configmap config -n metallb-system -o json 2> /dev/null | jq -r '.data.config' | egrep "[0-9]-[0-9]" | awk '{ print $2 }') 
  stt=$(minikube addons -p $TDH_MINIKUBE_PROFILE list -o json | jq -r '."metallb".Status')
  if [ "$stt" != "enabled" -o "$adr" == "-" -o "$adr" == "" ]; then
    minikube_ip=$(minikube ip) 
    sip=$(echo 192.168.64.16 | awk -F'.' '{ printf("%d.%d.%d.100\n",$1,$2,$3) }')
    eip=$(echo 192.168.64.16 | awk -F'.' '{ printf("%d.%d.%d.120\n",$1,$2,$3) }')
    
    echo "   ----------------------------------------------------------------------------------------------------------------"
    echo "   WARNING: Please configure the minikube addon 'metallb' with an ip Pool. The minikube host"
    echo "            ip is ($minikube_ip), choose the IP Range in the same net. ie: "
    echo ""
    echo "            => minikube addons configure metallb -p $TDH_MINIKUBE_PROFILE"
    echo "               -- Enter Load Balancer Start IP: $sip"
    echo "               -- Enter Load Balancer End IP: $eip"
    #echo "            => minikube -p $TDH_MINIKUBE_PROFILE stop"
    #echo "            => minikube -p $TDH_MINIKUBE_PROFILE start"
    echo "  ----------------------------------------------------------------------------------------------------------------"
    echo "  Please restart $0 when completed, thanks"

    #echo "  => minikube addons configure metallb -p $TDH_MINIKUBE_PROFILE"
    #echo "  => kubectl describe configmap config -n metallb-system"
    exit
  else
    adr=$(kubectl get configmap config -n metallb-system -o json | jq -r '.data.config' | yq e '.address-pools[].addresses[]' -)
    messageTitle "Verify MetalLB Loadbalancer"
    messagePrint " ▪ Metallb LoadBalancer Status"         "active"
    messagePrint " ▪ Metallb LoadBalancer IP-Pool"        "$adr"

    # --- STORE CONFIG IN CONFIGMAP ---
    uodateConfigMap tanzu-demo-hub TDH_METALLB_ENABLED "true"
    uodateConfigMap tanzu-demo-hub TDH_METALLB_IPPOOL "$adr"

    if [ "${DEBUG}" == "1" ]; then
      echo "-----------------------------------------------------------------------------------------------------------"
      kubectl describe configmap config -n metallb-system
      echo "-----------------------------------------------------------------------------------------------------------"
    fi
  fi
}

createClusterIssuer_delete_me() {
  #https://cert-manager.io/docs/tutorials/acme/dns-validation/
  NAMESPACE=cert-manager

  if [ "${TDH_HARBOR_STAGING_TLS_CERT}" == "true" ]; then
    LETSENSCRIPT_SERVER="https://acme-staging-v02.api.letsencrypt.org/directory"
  else
    LETSENSCRIPT_SERVER="https://acme-v02.api.letsencrypt.org/directory"
  fi

  kubectl get clusterissuer $TDH_TLS_ISSUER_NAME -n kube-system > /dev/null 2>&1
  if [ $? -ne 0 ]; then 
    AWS_HOSTED_ZONE=$(aws route53 list-hosted-zones-by-name --dns-name ${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN} | \
                      jq -r ".HostedZones[] | select(.Name | scan(\"^${zone}.\")).Id")
    AWS_HOSTED_ZONE_ID=$(aws route53 list-hosted-zones \
                        --query "HostedZones[?starts_with(to_string(Name), '${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}.')]" | \
                        jq -r '.[].Id' | awk -F '/' '{ print $NF }')
    HARBOR_HOSTNAME="harbor.apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"
    NOTARY_HOSTNAME="notary.apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"
echo "HARBOR_HOSTNAME:$HARBOR_HOSTNAME"
echo "NOTARY_HOSTNAME:$NOTARY_HOSTNAME"

    messageTitle "Create LetsEnscript ClusterIssuer"
    messagePrint " ▪ LetsEnscript Issuer Name"         "$TDH_TLS_ISSUER_NAME"
    messagePrint " ▪ LetsEnscript Solver"              "route53"
    messagePrint " ▪ LetsEnscript Solver ZoneID"       "$AWS_HOSTED_ZONE_ID"
    messagePrint " ▪ LetsEnscript DNSZone"             "*.apps-contour.${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}"
    messagePrint " ▪ LetsEnscript DNSZone"             "*.apps-nginx.${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}"

    echo "apiVersion: cert-manager.io/v1alpha2"                                    >  $TDH_TLS_ISSUER_NAME
    echo "kind: ClusterIssuer"                                                     >> $TDH_TLS_ISSUER_NAME
    echo "metadata:"                                                               >> $TDH_TLS_ISSUER_NAME
    echo "  name: $TDH_TLS_ISSUER_NAME"                                            >> $TDH_TLS_ISSUER_NAME
    echo "spec:"                                                                   >> $TDH_TLS_ISSUER_NAME
    echo "  acme:"                                                                 >> $TDH_TLS_ISSUER_NAME
    echo "    email: sdubois@vmware.com"                                           >> $TDH_TLS_ISSUER_NAME
    echo "    privateKeySecretRef:"                                                >> $TDH_TLS_ISSUER_NAME
    echo "      name: $TDH_TLS_ISSUER_NAME"                                        >> $TDH_TLS_ISSUER_NAME
    echo "    server: $LETSENSCRIPT_SERVER"                                        >> $TDH_TLS_ISSUER_NAME
    echo "    solvers:"                                                            >> $TDH_TLS_ISSUER_NAME
    echo "    - selector:"                                                         >> $TDH_TLS_ISSUER_NAME
    echo "        dnsZones:"                                                       >> $TDH_TLS_ISSUER_NAME
    echo "          - \"$HARBOR_HOSTNAME\""                                        >> $TDH_TLS_ISSUER_NAME
    echo "          - \"$NOTARY_HOSTNAME\""                                        >> $TDH_TLS_ISSUER_NAME
    echo "          - \"*.apps-contour.${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}\""  >> $TDH_TLS_ISSUER_NAME
    echo "          - \"*.apps-nginx.${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}\""    >> $TDH_TLS_ISSUER_NAME
    echo "      dns01:"                                                            >> $TDH_TLS_ISSUER_NAME
    echo "        route53:"                                                        >> $TDH_TLS_ISSUER_NAME
    echo "          region: $AWS_REGION"                                           >> $TDH_TLS_ISSUER_NAME
    echo "          accessKeyID: $AWS_CERT_ACCESS_KEY"                             >> $TDH_TLS_ISSUER_NAME
    echo "          secretAccessKeySecretRef:"                                     >> $TDH_TLS_ISSUER_NAME
    echo "            name: route53-credentials-secret"                            >> $TDH_TLS_ISSUER_NAME
    echo "            key: aws-credentials"                                        >> $TDH_TLS_ISSUER_NAME
    echo "          # you can also assume a role with these credentials"           >> $TDH_TLS_ISSUER_NAME
    echo "          hostedZoneID: $AWS_HOSTED_ZONE_ID"                             >> $TDH_TLS_ISSUER_NAME

    # --- CREATE/RECREATE AWS ROUTE53 SECRET ---
    kubectl -n cert-manager delete secret route53-credentials-secret > /dev/null 2>&1
    kubectl -n default delete secret route53-credentials-secret > /dev/null 2>&1
    kubectl -n cert-manager create secret generic route53-credentials-secret \
            --from-literal=aws-credentials="$AWS_CERT_SECRET_KEY" > /dev/null 2>&1

    # --- RECREATE ISSUER ---
    kubectl -n $NAMESPACE delete --all clusterissuer,certificate,order,challenge > /dev/null 2>&1
    sleep 60
    kubectl -n $NAMESPACE apply -f $TDH_TLS_ISSUER_NAME
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to deploy letsenscript issuer"
      echo "       => kubectl -n $NAMESPACE apply -f $TDH_TLS_ISSUER_NAME"
      exit
    fi

    cnt=0
    while [ $cnt -eq 0 ]; do
      # --- VERIFY ISSUER ---
      issuer_reason=$(kubectl get clusterissuer $TDH_TLS_ISSUER_NAME -n kube-system -o json 2>/dev/null | \
                    jq -r '.status.conditions[].reason' 2>/dev/null)
      issuer_status=$(kubectl get clusterissuer $TDH_TLS_ISSUER_NAME -n kube-system -o json 2>/dev/null | \
                    jq -r '.status.conditions[].status' 2>/dev/null)

      if [ "$issuer_reason" == "ACMEAccountRegistered" -a "$issuer_status" == "True" ]; then cnt=1; fi
      sleep 5
    done

    messagePrint " ▪ LetsEnscript Request Reason"      "$issuer_reason"
    messagePrint " ▪ LetsEnscript Request Status"      "$issuer_status"
  else
    issuer_reason=$(kubectl get clusterissuer letsencrypt-staging -n kube-system -o json 2>/dev/null | \
                  jq -r '.status.conditions[].reason')
    issuer_status=$(kubectl get clusterissuer letsencrypt-staging -n kube-system -o json 2>/dev/null | \
                  jq -r '.status.conditions[].status')
    issuer_date=$(kubectl get clusterissuer letsencrypt-staging -n kube-system -o json 2>/dev/null | \
                  jq -r '.status.conditions[].lastTransitionTime')

    messageTitle "Verify LetsEnscript ClusterIssuer"
    messagePrint " ▪ LetsEnscript Issuer Name"         "$TDH_TLS_ISSUER_NAME"
    messagePrint " ▪ LetsEnscript DNSZone"             "$HARBOR_HOSTNAME"
    messagePrint " ▪ LetsEnscript DNSZone"             "$NOTARY_HOSTNAME"
    messagePrint " ▪ LetsEnscript DNSZone"             "$SACHA_HOSTNAME"
    messagePrint " ▪ LetsEnscript Request Requested"   "$issuer_date"
    messagePrint " ▪ LetsEnscript Request Reason"      "$issuer_reason"
    messagePrint " ▪ LetsEnscript Request Status"      "$issuer_status"
  fi

  # --- CREATE CERTIFICATE ---
  stt_rdy=$(kubectl get certificate $TDH_TLS_CERT -o json 2>/dev/null | \
            jq -r '.status.conditions[] | select(.type == "Ready").status')
  kubectl get secret $TDH_TLS_SECRET > /dev/null 2>&1; stt_sec=$?
  kubectl get certificate $TDH_TLS_CERT > /dev/null 2>&1; stt_crt=$?
  if [ "${stt_rdy}" == "Frue" -o $stt_sec -ne 0 -o $stt_crt -ne 0 ]; then  
    messageTitle "Create LetsEnscript Certificate"
    CERTIFICATE_CONFIG=/tmp/certificate.yaml
    echo "apiVersion: cert-manager.io/v1"                       >  $CERTIFICATE_CONFIG
    echo "kind: Certificate"                                    >> $CERTIFICATE_CONFIG
    echo "metadata:"                                            >> $CERTIFICATE_CONFIG
    echo "  name: $TDH_TLS_CERT"                                >> $CERTIFICATE_CONFIG
    echo "  namespace: default"                                 >> $CERTIFICATE_CONFIG
    echo "spec:"                                                >> $CERTIFICATE_CONFIG
    echo "  secretName: $TDH_TLS_SECRET"                        >> $CERTIFICATE_CONFIG
    echo "  issuerRef:"                                         >> $CERTIFICATE_CONFIG
    echo "    name: letsencrypt-staging"                        >> $CERTIFICATE_CONFIG
    echo "    kind: ClusterIssuer"                              >> $CERTIFICATE_CONFIG
    echo "  dnsNames:"                                          >> $CERTIFICATE_CONFIG
    #echo "  - \"$HARBOR_HOSTNAME\""                             >> $CERTIFICATE_CONFIG
    #echo "  - \"$NOTARY_HOSTNAME\""                             >> $CERTIFICATE_CONFIG
    echo "  - '*.apps-contour.${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}'"     >> $CERTIFICATE_CONFIG
    echo "  - '*.apps-nginx.${TDH_ENVNAME}.${AWS_HOSTED_DNS_DOMAIN}'"       >> $CERTIFICATE_CONFIG

    kubectl create -f $CERTIFICATE_CONFIG > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to deploy letsenscript certificate"
      echo "       => kubectl create -f $CERTIFICATE_CONFIG"
      exit
    fi

    sleep 30

    cnt=0
    while [ $cnt -eq 0 ]; do
      stt=$(kubectl get certificate $TDH_TLS_CERT -o json 2>/dev/null | \
            jq -r '.status.conditions[] | select(.type == "Ready").status')
      if [ "$stt" == "True" ]; then cnt=1; fi
      sleep 5
    done

    if [ "$stt" == "True" ]; then 
      tim=$(kubectl get certificate $TDH_TLS_CERT -o json 2>/dev/null | jq -r '.status.conditions[].lastTransitionTime')
      msg=$(kubectl get certificate $TDH_TLS_CERT -o json 2>/dev/null | jq -r '.status.conditions[].message')
      tim=$(kubectl get certificate $TDH_TLS_CERT -o json 2>/dev/null | jq -r '.status.conditions[].lastTransitionTime')
      messagePrint " ▪ LetsEnscript Certificate Name"         "$TDH_TLS_CERT"
      messagePrint " ▪ LetsEnscript Certificate Issued"       "$tim"
      messagePrint " ▪ LetsEnscript Certificate Message"      "$msg"
      messagePrint " ▪ LetsEnscript Certificate Status"       "$stt"
      messagePrint " ▪ LetsEnscript Certificate Secret"       "${TDH_TLS_SECRET}"
    else
      messagePrint " ▪ LetsEnscript Certificate Status"       "$stt"
      echo "------------------------------------------------------------------------------------------------------------------------"
      kubectl describe certificate $TDH_TLS_CERT
      echo "------------------------------------------------------------------------------------------------------------------------"
      echo "=> kubectl describe clusterissuer letsencrypt-staging" 
      echo "=> kubectl describe order" 
      echo "=> kubectl describe challenge" 
      echo "=> kubectl describe certificate" 
      exit
    fi
  else
    stt=$(kubectl get certificate $TDH_TLS_CERT -o json 2>/dev/null | jq -r '.status.conditions[].status')
    if [ "$stt" != "True" ]; then
      messagePrint " - LetsEnscript Certificate Status"       "$stt"
      echo "------------------------------------------------------------------------------------------------------------------------"
      kubectl describe certificate $TDH_TLS_CERT
      echo "------------------------------------------------------------------------------------------------------------------------"
      echo "=> kubectl describe clusterissuer letsencrypt-staging" 
      echo "=> kubectl describe order"
      echo "=> kubectl describe challenge"
      echo "=> kubectl describe certificate" 
      exit
    fi
  fi

  messageTitle "Verify LetsEnscript Certificate"
  messagePrint " ▪ LetsEnscript Certificate Name"       "$TDH_TLS_CERT"
  messagePrint " ▪ LetsEnscript Certificate Secret"     "$TDH_TLS_SECRET"

  # --- STORE SETTINGS IN CONFIGMAP ---
  uodateConfigMap tanzu-demo-hub TDH_CERTIFICATE_NAME   "$TDH_TLS_CERT"
  uodateConfigMap tanzu-demo-hub TDH_CERTIFICATE_SECRET "$TDH_TLS_SECRET"

  echo "------------------------------------------------------------------------------------------------------------------------"
  kubectl get secret tanzu-demo-hub-tls -o json | jq -r '.data."tls.crt"' | base64 -d | \
          openssl x509 -inform pem -noout -text | grep $AWS_HOSTED_DNS_DOMAIN
  echo "------------------------------------------------------------------------------------------------------------------------"
}

InstallHarborRegistry_delete_me() {
  NAMESPACE=registry-harbor
  HARBOR_TLS_SECRET=$TDH_TLS_SECRET
  NOTARY_TLS_SECRET=$TDH_TLS_SECRET
  HARBOR_HOSTNAME="harbor.apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"
  NOTARY_HOSTNAME="notary.apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"

  kubectl get ns $NAMESPACE > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    messageTitle "Install Harbor Reistry"

    # --- VERIFY SERVICE CONFIGURATION ---
    checkKubernetesServices harbor

    messagePrint " ▪ Harbor Registry/Notary Server"        "harbor.apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"
    messagePrint "  "                                      "notary.apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"
    messagePrint " ▪ Harbor Admin Password"                $(maskPassword "$TDH_HARBOR_ADMIN_PASSWORD")
    messagePrint " ▪ Harbor TLS Staging Cert"              "$TDH_HARBOR_STAGING_TLS_CERT"

    # --- INSTALL CONTOUR INGRESS ---
    kubectl create ns $NAMESPACE > /dev/null 2>&1
    helm uninstall harbor -n $NAMESPACE > /dev/null 2>&1

    # --- COPY SECRET TO NAMESPACE ---
    kubectl get secret tanzu-demo-hub-tls --namespace=default  -oyaml | grep -v '^\s*namespace:\s' | \
    kubectl apply --namespace=registry-harbor -f -

    HARBOR_VALUES=/tmp/harbor_values.yaml
    echo "harborAdminPassword: $TDH_HARBOR_ADMIN_PASSWORD"                                                                      >  $HARBOR_VALUES
    echo ""                                                                                                                     >> $HARBOR_VALUES
    echo "service:"                                                                                                             >> $HARBOR_VALUES
    echo "  type: ClusterIP"                                                                                                    >> $HARBOR_VALUES
    echo "  tls:"                                                                                                               >> $HARBOR_VALUES
    echo "    enabled: true"                                                                                                    >> $HARBOR_VALUES
    echo "    existingSecret: $HARBOR_TLS_SECRET"                                                                               >> $HARBOR_VALUES
    echo "    notaryExistingSecret: $NOTARY_TLS_SECRET"                                                                         >> $HARBOR_VALUES
    echo ""                                                                                                                     >> $HARBOR_VALUES
    echo "ingress:"                                                                                                             >> $HARBOR_VALUES
    echo "  enabled: true"                                                                                                      >> $HARBOR_VALUES
    echo "  hosts:"                                                                                                             >> $HARBOR_VALUES
    echo "    core: $HARBOR_HOSTNAME"                                                                                           >> $HARBOR_VALUES
    echo "    notary: $NOTARY_HOSTNAME"                                                                                         >> $HARBOR_VALUES
    echo "  annotations:"                                                                                                       >> $HARBOR_VALUES
    #echo "    cert-manager.io/cluster-issuer: letsencrypt-staging  # use letsencrypt-staging cluster issuer for TLS certs"      >> $HARBOR_VALUES
    #echo "    kubernetes.io/tls-acme: \"true\"                     # using ACME certificates for TLS"                           >> $HARBOR_VALUES
    echo "    ingress.kubernetes.io/force-ssl-redirect: \"true\"   # force https, even if http is requested"                    >> $HARBOR_VALUES
    echo "    kubernetes.io/ingress.class: contour                 # using Contour for ingress"                                 >> $HARBOR_VALUES

    echo "externalURL: https://harbor.apps-contour.$TDH_ENVNAME.$AWS_HOSTED_DNS_DOMAIN"                                         >> $HARBOR_VALUES
    echo ""                                                                                                                     >> $HARBOR_VALUES
    echo "portal:"                                                                                                              >> $HARBOR_VALUES
    echo "  tls:"                                                                                                               >> $HARBOR_VALUES
    echo "    existingSecret: $HARBOR_TLS_SECRET"                                                                               >> $HARBOR_VALUES
    echo ""                                                                                                                     >> $HARBOR_VALUES
    echo "persistence:"                                                                                                         >> $HARBOR_VALUES
    echo "  enabled: true"                                                                                                      >> $HARBOR_VALUES
    echo "  resourcePolicy: 'keep'"                                                                                             >> $HARBOR_VALUES
    echo "  persistentVolumeClaim:"                                                                                             >> $HARBOR_VALUES
    echo "    registry:"                                                                                                        >> $HARBOR_VALUES
    echo "      accessMode: ReadWriteOnce"                                                                                      >> $HARBOR_VALUES
    echo "      size: 20Gi"                                                                                                     >> $HARBOR_VALUES

    helm install harbor bitnami/harbor -f $HARBOR_VALUES --version 9.2.2 -n $NAMESPACE > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to install bitnami/harbor"
      echo "       => helm install harbor bitnami/harbor -f $HARBOR_VALUES --version 9.2.2 -n $NAMESPACE"
      exit
    fi

    cnt=0
    while [ $cnt -eq 0 ]; do
      cnt=$(kubectl get pods -n registry-harbor | sed 1d | grep -vc Running)
      if [ $cnt -eq 0 ]; then cnt=1; fi
      sleep 5
    done

    # --- WAIT FOR HARBOR TO COME ONLINE ---
    messagePrint " ▪ Verify Harbor Reistry Access" "$HARBOR_HOSTNAME"
    cnt=0
    while [ $cnt -eq 0 ]; do
      docker login $HARBOR_HOSTNAME -u admin -p $TDH_HARBOR_ADMIN_PASSWORD > /dev/null 2>&1
      if [ $? -eq 0 ]; then cnt=1; fi
      sleep 10
    done
  fi


  ver=$(helm -n $NAMESPACE ls -o json | jq -r '.[].app_version')
  crt=$(helm -n $NAMESPACE ls -o json | jq -r '.[].chart')
  stt=$(helm -n $NAMESPACE ls -o json | jq -r '.[].status')
  dat=$(helm -n $NAMESPACE ls -o json | jq -r '.[].updated')

  messageTitle "Verify Harbor Reistry"
  messagePrint " ▪ Harbor Reistry Namespace:"         "$NAMESPACE"
  messagePrint " ▪ Harbor Reistry Helm Chart:"        "$crt"
  messagePrint " ▪ Harbor Reistry Version:"           "$ver"
  messagePrint " ▪ Harbor Reistry Status:"            "$stt"
  messagePrint " ▪ Harbor Reistry Installed/Updated:" "$dat"

  # --- STORE SETTINGS IN CONFIGMAP ---
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_ENABLED        "true"
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_ADMIN_PASSWORD "$TDH_HARBOR_ADMIN_PASSWORD"
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_DNS_HARBOR     "$HARBOR_HOSTNAME"
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_DNS_NOTARY     "$NOTARY_HOSTNAME"
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_CHART_NAME     "$crt"
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_CHART_VERSION  "$ver"
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_CHART_STATUS   "$stt"
  uodateConfigMap tanzu-demo-hub TDH_HARBOR_REGISTRY_CHART_UPDATE   "$dat"
}

cleanUPNamespace() {
  messagePrint "Delete Namespace" "$1"

  kubectl delete ns $1 >/dev/null 2>&1
}

export TDH_DEPLOYMENT_ENV_NAME=$TDH_INFRASTRUCTURE
export TDH_TLS_CERT=tanzu-demo-hub
export TDH_TLS_SECRET=${TDH_TLS_CERT}-tls
export TDH_TLS_ISSUER_NAME=letsencrypt-staging
export TDH_TLS_ISSUER_CONFIG=/tmp/issuer-dns-manager1.yaml

if [ "$K8S_CLEAN_CERTIFICATES" == "true" ]; then 
  messagePrint "Cleaning Let's Enscript Certificate request" "clusterissuer,certificate,order,challenge,CertificateRequest"
  kubectl delete clusterissuer,certificate,order,challenge,CertificateRequest --all > /dev/null 2>&1
  kubectl elete secret tanzu-demo-hub-tls $TDH_TLS_SECRET $TDH_TLS_ISSUER_NAME > /dev/null 2>&1

  kubectl delete secret -n cert-manager $TDH_TLS_ISSUER_NAME > /dev/null 2>&1

  exit
fi

if [ "$K8S_CLEAN_DEPLOYMENT" == "true" ]; then 
  messageTitle "Cleanup Minikube Namespaces and Obkects"
  cleanUPNamespace registry-harbor
  cleanUPNamespace cert-manager

  messagePrint "Delete ClusterIssuer" "$TDH_TLS_ISSUER_NAME"
  kubectl delete clusterissuer $TDH_TLS_ISSUER_NAME -n kube-system > /dev/null 2>&1
  #kubectl delete crd extensionservices.projectcontour.io 
  #kubectl delete crd httpproxies.projectcontour.io 
  #kubectl delete crd tlscertificatedelegations.projectcontour.io 

  # --- REMOVE CERTIFICATE ---
  kubectl delete Certificate $TDH_TLS_CERT > /dev/null 2>&1
  kubectl delete clusterissuer,certificate,order,challenge,CertificateRequest --all > /dev/null 2>&1
  kubectl delete secret -n cert-manager $TDH_TLS_ISSUER_NAME > /dev/null 2>&1

  # --- DELETE CONFIGURATION
  kubectl delete configmap tanzu-demo-hub > /dev/null 2>&1

  exit
fi

checkCLIcommands TOOLS
checkCLIcommands TKG
checkCloudAccess

# --- MINIKUBE SETUP ----
VerifyK8SDemoPlatform
InstallMetallb
checkTDHAccess

uodateConfigMap tanzu-demo-hub TDH_DOMAIN               $AWS_HOSTED_DNS_DOMAIN 
uodateConfigMap tanzu-demo-hub TDH_ENVNAME              $TDH_ENVNAME
uodateConfigMap tanzu-demo-hub TDH_DEPLOYMENT_TYPE      "minikube" 
uodateConfigMap tanzu-demo-hub TDH_MANAGED_BY_TMC       "false" 

# --- INSTALL K8 SERVICES ---
InstallCertManager
InstallContour
createClusterIssuer
InstallHarborRegistry
getRootCA tanzu-demo-hub-tls
installBuildService
installTanzuDataPostgres
installSpringCloudGateway
installMinio


echo "-----------------------------------------------------------------------------------------------------------"
echo "Tanzu Kubernetes Grid Cluster ($TDH_MINIKUBE_PROFILE) build completed"
echo "-----------------------------------------------------------------------------------------------------------"
echo "1.) Set KUBECONFIG and set the cluster context"
echo "    => export KUBECONFIG=/tmp/${TMC_CLUSTER_NAME}.kubeconfig:~/.kube/config"
echo "    => minikube -p $TDH_MINIKUBE_PROFILE update-context"
echo "    => kubectl config use-context $TDH_MINIKUBE_PROFILE"
echo "    => kubectl config get-contexts"
echo "2.) Relaxing Pod Security in cluster ($TMC_CLUSTER_NAME)"
echo "    # Allow Privileged Pods for the Cluster"
echo "    => kubectl create clusterrolebinding tanzu-demo-hub-privileged-cluster-role-binding \\"
echo "        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated"
echo "    # Allow Privileged Pods for a Namespace (my-namespace)"
echo "    => kubectl create rolebinding tanzu-demo-hub-privileged-my-namespace-role-binding \\"
echo "        --clusterrole=vmware-system-tmc-psp-privileged --group=system:authenticated -n my-namespace"





